// This file was generated by counterfeiter
package fake_bbs

import (
	"sync"
	"time"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
	"github.com/tedsuo/ifrit"
)

type FakeMetricsBBS struct {
	TasksStub        func() ([]models.Task, error)
	tasksMutex       sync.RWMutex
	tasksArgsForCall []struct{}
	tasksReturns     struct {
		result1 []models.Task
		result2 error
	}
	ServiceRegistrationsStub        func() (models.ServiceRegistrations, error)
	serviceRegistrationsMutex       sync.RWMutex
	serviceRegistrationsArgsForCall []struct{}
	serviceRegistrationsReturns     struct {
		result1 models.ServiceRegistrations
		result2 error
	}
	FreshnessesStub        func() ([]models.Freshness, error)
	freshnessesMutex       sync.RWMutex
	freshnessesArgsForCall []struct{}
	freshnessesReturns     struct {
		result1 []models.Freshness
		result2 error
	}
	DesiredLRPsStub        func() ([]models.DesiredLRP, error)
	desiredLRPsMutex       sync.RWMutex
	desiredLRPsArgsForCall []struct{}
	desiredLRPsReturns     struct {
		result1 []models.DesiredLRP
		result2 error
	}
	ActualLRPsStub        func() ([]models.ActualLRP, error)
	actualLRPsMutex       sync.RWMutex
	actualLRPsArgsForCall []struct{}
	actualLRPsReturns     struct {
		result1 []models.ActualLRP
		result2 error
	}
	NewRuntimeMetricsLockStub        func(runtimeMetricsID string, interval time.Duration) ifrit.Runner
	newRuntimeMetricsLockMutex       sync.RWMutex
	newRuntimeMetricsLockArgsForCall []struct {
		runtimeMetricsID string
		interval         time.Duration
	}
	newRuntimeMetricsLockReturns struct {
		result1 ifrit.Runner
	}
}

func (fake *FakeMetricsBBS) Tasks() ([]models.Task, error) {
	fake.tasksMutex.Lock()
	fake.tasksArgsForCall = append(fake.tasksArgsForCall, struct{}{})
	fake.tasksMutex.Unlock()
	if fake.TasksStub != nil {
		return fake.TasksStub()
	} else {
		return fake.tasksReturns.result1, fake.tasksReturns.result2
	}
}

func (fake *FakeMetricsBBS) TasksCallCount() int {
	fake.tasksMutex.RLock()
	defer fake.tasksMutex.RUnlock()
	return len(fake.tasksArgsForCall)
}

func (fake *FakeMetricsBBS) TasksReturns(result1 []models.Task, result2 error) {
	fake.TasksStub = nil
	fake.tasksReturns = struct {
		result1 []models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsBBS) ServiceRegistrations() (models.ServiceRegistrations, error) {
	fake.serviceRegistrationsMutex.Lock()
	fake.serviceRegistrationsArgsForCall = append(fake.serviceRegistrationsArgsForCall, struct{}{})
	fake.serviceRegistrationsMutex.Unlock()
	if fake.ServiceRegistrationsStub != nil {
		return fake.ServiceRegistrationsStub()
	} else {
		return fake.serviceRegistrationsReturns.result1, fake.serviceRegistrationsReturns.result2
	}
}

func (fake *FakeMetricsBBS) ServiceRegistrationsCallCount() int {
	fake.serviceRegistrationsMutex.RLock()
	defer fake.serviceRegistrationsMutex.RUnlock()
	return len(fake.serviceRegistrationsArgsForCall)
}

func (fake *FakeMetricsBBS) ServiceRegistrationsReturns(result1 models.ServiceRegistrations, result2 error) {
	fake.ServiceRegistrationsStub = nil
	fake.serviceRegistrationsReturns = struct {
		result1 models.ServiceRegistrations
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsBBS) Freshnesses() ([]models.Freshness, error) {
	fake.freshnessesMutex.Lock()
	fake.freshnessesArgsForCall = append(fake.freshnessesArgsForCall, struct{}{})
	fake.freshnessesMutex.Unlock()
	if fake.FreshnessesStub != nil {
		return fake.FreshnessesStub()
	} else {
		return fake.freshnessesReturns.result1, fake.freshnessesReturns.result2
	}
}

func (fake *FakeMetricsBBS) FreshnessesCallCount() int {
	fake.freshnessesMutex.RLock()
	defer fake.freshnessesMutex.RUnlock()
	return len(fake.freshnessesArgsForCall)
}

func (fake *FakeMetricsBBS) FreshnessesReturns(result1 []models.Freshness, result2 error) {
	fake.FreshnessesStub = nil
	fake.freshnessesReturns = struct {
		result1 []models.Freshness
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsBBS) DesiredLRPs() ([]models.DesiredLRP, error) {
	fake.desiredLRPsMutex.Lock()
	fake.desiredLRPsArgsForCall = append(fake.desiredLRPsArgsForCall, struct{}{})
	fake.desiredLRPsMutex.Unlock()
	if fake.DesiredLRPsStub != nil {
		return fake.DesiredLRPsStub()
	} else {
		return fake.desiredLRPsReturns.result1, fake.desiredLRPsReturns.result2
	}
}

func (fake *FakeMetricsBBS) DesiredLRPsCallCount() int {
	fake.desiredLRPsMutex.RLock()
	defer fake.desiredLRPsMutex.RUnlock()
	return len(fake.desiredLRPsArgsForCall)
}

func (fake *FakeMetricsBBS) DesiredLRPsReturns(result1 []models.DesiredLRP, result2 error) {
	fake.DesiredLRPsStub = nil
	fake.desiredLRPsReturns = struct {
		result1 []models.DesiredLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsBBS) ActualLRPs() ([]models.ActualLRP, error) {
	fake.actualLRPsMutex.Lock()
	fake.actualLRPsArgsForCall = append(fake.actualLRPsArgsForCall, struct{}{})
	fake.actualLRPsMutex.Unlock()
	if fake.ActualLRPsStub != nil {
		return fake.ActualLRPsStub()
	} else {
		return fake.actualLRPsReturns.result1, fake.actualLRPsReturns.result2
	}
}

func (fake *FakeMetricsBBS) ActualLRPsCallCount() int {
	fake.actualLRPsMutex.RLock()
	defer fake.actualLRPsMutex.RUnlock()
	return len(fake.actualLRPsArgsForCall)
}

func (fake *FakeMetricsBBS) ActualLRPsReturns(result1 []models.ActualLRP, result2 error) {
	fake.ActualLRPsStub = nil
	fake.actualLRPsReturns = struct {
		result1 []models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsBBS) NewRuntimeMetricsLock(runtimeMetricsID string, interval time.Duration) ifrit.Runner {
	fake.newRuntimeMetricsLockMutex.Lock()
	fake.newRuntimeMetricsLockArgsForCall = append(fake.newRuntimeMetricsLockArgsForCall, struct {
		runtimeMetricsID string
		interval         time.Duration
	}{runtimeMetricsID, interval})
	fake.newRuntimeMetricsLockMutex.Unlock()
	if fake.NewRuntimeMetricsLockStub != nil {
		return fake.NewRuntimeMetricsLockStub(runtimeMetricsID, interval)
	} else {
		return fake.newRuntimeMetricsLockReturns.result1
	}
}

func (fake *FakeMetricsBBS) NewRuntimeMetricsLockCallCount() int {
	fake.newRuntimeMetricsLockMutex.RLock()
	defer fake.newRuntimeMetricsLockMutex.RUnlock()
	return len(fake.newRuntimeMetricsLockArgsForCall)
}

func (fake *FakeMetricsBBS) NewRuntimeMetricsLockArgsForCall(i int) (string, time.Duration) {
	fake.newRuntimeMetricsLockMutex.RLock()
	defer fake.newRuntimeMetricsLockMutex.RUnlock()
	return fake.newRuntimeMetricsLockArgsForCall[i].runtimeMetricsID, fake.newRuntimeMetricsLockArgsForCall[i].interval
}

func (fake *FakeMetricsBBS) NewRuntimeMetricsLockReturns(result1 ifrit.Runner) {
	fake.NewRuntimeMetricsLockStub = nil
	fake.newRuntimeMetricsLockReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

var _ bbs.MetricsBBS = new(FakeMetricsBBS)
