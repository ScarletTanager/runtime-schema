// This file was generated by counterfeiter
package fake_bbs

import (
	"sync"
	"time"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs"
	"github.com/tedsuo/ifrit"
)

type FakeMetricsBBS struct {
	NewRuntimeMetricsLockStub        func(runtimeMetricsID string, retryInterval time.Duration) ifrit.Runner
	newRuntimeMetricsLockMutex       sync.RWMutex
	newRuntimeMetricsLockArgsForCall []struct {
		runtimeMetricsID string
		retryInterval    time.Duration
	}
	newRuntimeMetricsLockReturns struct {
		result1 ifrit.Runner
	}
}

func (fake *FakeMetricsBBS) NewRuntimeMetricsLock(runtimeMetricsID string, retryInterval time.Duration) ifrit.Runner {
	fake.newRuntimeMetricsLockMutex.Lock()
	fake.newRuntimeMetricsLockArgsForCall = append(fake.newRuntimeMetricsLockArgsForCall, struct {
		runtimeMetricsID string
		retryInterval    time.Duration
	}{runtimeMetricsID, retryInterval})
	fake.newRuntimeMetricsLockMutex.Unlock()
	if fake.NewRuntimeMetricsLockStub != nil {
		return fake.NewRuntimeMetricsLockStub(runtimeMetricsID, retryInterval)
	} else {
		return fake.newRuntimeMetricsLockReturns.result1
	}
}

func (fake *FakeMetricsBBS) NewRuntimeMetricsLockCallCount() int {
	fake.newRuntimeMetricsLockMutex.RLock()
	defer fake.newRuntimeMetricsLockMutex.RUnlock()
	return len(fake.newRuntimeMetricsLockArgsForCall)
}

func (fake *FakeMetricsBBS) NewRuntimeMetricsLockArgsForCall(i int) (string, time.Duration) {
	fake.newRuntimeMetricsLockMutex.RLock()
	defer fake.newRuntimeMetricsLockMutex.RUnlock()
	return fake.newRuntimeMetricsLockArgsForCall[i].runtimeMetricsID, fake.newRuntimeMetricsLockArgsForCall[i].retryInterval
}

func (fake *FakeMetricsBBS) NewRuntimeMetricsLockReturns(result1 ifrit.Runner) {
	fake.NewRuntimeMetricsLockStub = nil
	fake.newRuntimeMetricsLockReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

var _ bbs.MetricsBBS = new(FakeMetricsBBS)
