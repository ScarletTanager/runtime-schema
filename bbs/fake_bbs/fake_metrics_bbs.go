// This file was generated by counterfeiter
package fake_bbs

import (
	"github.com/cloudfoundry-incubator/runtime-schema/bbs"

	"github.com/cloudfoundry-incubator/runtime-schema/models"

	"sync"
)

type FakeMetricsBBS struct {
	GetAllTasksStub        func() ([]models.Task, error)
	getAllTasksMutex       sync.RWMutex
	getAllTasksArgsForCall []struct{}
	getAllTasksReturns struct {
		result1 []models.Task
		result2 error
	}
	GetServiceRegistrationsStub        func() (models.ServiceRegistrations, error)
	getServiceRegistrationsMutex       sync.RWMutex
	getServiceRegistrationsArgsForCall []struct{}
	getServiceRegistrationsReturns struct {
		result1 models.ServiceRegistrations
		result2 error
	}
	CheckFreshnessStub        func(domain string) error
	checkFreshnessMutex       sync.RWMutex
	checkFreshnessArgsForCall []struct {
		domain string
	}
	checkFreshnessReturns struct {
		result1 error
	}
}

func (fake *FakeMetricsBBS) GetAllTasks() ([]models.Task, error) {
	fake.getAllTasksMutex.Lock()
	defer fake.getAllTasksMutex.Unlock()
	fake.getAllTasksArgsForCall = append(fake.getAllTasksArgsForCall, struct{}{})
	if fake.GetAllTasksStub != nil {
		return fake.GetAllTasksStub()
	} else {
		return fake.getAllTasksReturns.result1, fake.getAllTasksReturns.result2
	}
}

func (fake *FakeMetricsBBS) GetAllTasksCallCount() int {
	fake.getAllTasksMutex.RLock()
	defer fake.getAllTasksMutex.RUnlock()
	return len(fake.getAllTasksArgsForCall)
}

func (fake *FakeMetricsBBS) GetAllTasksReturns(result1 []models.Task, result2 error) {
	fake.getAllTasksReturns = struct {
		result1 []models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsBBS) GetServiceRegistrations() (models.ServiceRegistrations, error) {
	fake.getServiceRegistrationsMutex.Lock()
	defer fake.getServiceRegistrationsMutex.Unlock()
	fake.getServiceRegistrationsArgsForCall = append(fake.getServiceRegistrationsArgsForCall, struct{}{})
	if fake.GetServiceRegistrationsStub != nil {
		return fake.GetServiceRegistrationsStub()
	} else {
		return fake.getServiceRegistrationsReturns.result1, fake.getServiceRegistrationsReturns.result2
	}
}

func (fake *FakeMetricsBBS) GetServiceRegistrationsCallCount() int {
	fake.getServiceRegistrationsMutex.RLock()
	defer fake.getServiceRegistrationsMutex.RUnlock()
	return len(fake.getServiceRegistrationsArgsForCall)
}

func (fake *FakeMetricsBBS) GetServiceRegistrationsReturns(result1 models.ServiceRegistrations, result2 error) {
	fake.getServiceRegistrationsReturns = struct {
		result1 models.ServiceRegistrations
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsBBS) CheckFreshness(domain string) error {
	fake.checkFreshnessMutex.Lock()
	defer fake.checkFreshnessMutex.Unlock()
	fake.checkFreshnessArgsForCall = append(fake.checkFreshnessArgsForCall, struct {
		domain string
	}{domain})
	if fake.CheckFreshnessStub != nil {
		return fake.CheckFreshnessStub(domain)
	} else {
		return fake.checkFreshnessReturns.result1
	}
}

func (fake *FakeMetricsBBS) CheckFreshnessCallCount() int {
	fake.checkFreshnessMutex.RLock()
	defer fake.checkFreshnessMutex.RUnlock()
	return len(fake.checkFreshnessArgsForCall)
}

func (fake *FakeMetricsBBS) CheckFreshnessArgsForCall(i int) string {
	fake.checkFreshnessMutex.RLock()
	defer fake.checkFreshnessMutex.RUnlock()
	return fake.checkFreshnessArgsForCall[i].domain
}

func (fake *FakeMetricsBBS) CheckFreshnessReturns(result1 error) {
	fake.checkFreshnessReturns = struct {
		result1 error
	}{result1}
}

var _ bbs.MetricsBBS = new(FakeMetricsBBS)
