// This file was generated by counterfeiter
package fake_bbs

import (
	"sync"
	"time"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
	"github.com/tedsuo/ifrit"
)

type FakeMetricsBBS struct {
	GetAllTasksStub        func() ([]models.Task, error)
	getAllTasksMutex       sync.RWMutex
	getAllTasksArgsForCall []struct{}
	getAllTasksReturns     struct {
		result1 []models.Task
		result2 error
	}
	GetServiceRegistrationsStub        func() (models.ServiceRegistrations, error)
	getServiceRegistrationsMutex       sync.RWMutex
	getServiceRegistrationsArgsForCall []struct{}
	getServiceRegistrationsReturns     struct {
		result1 models.ServiceRegistrations
		result2 error
	}
	FreshnessesStub        func() ([]models.Freshness, error)
	freshnessesMutex       sync.RWMutex
	freshnessesArgsForCall []struct{}
	freshnessesReturns     struct {
		result1 []models.Freshness
		result2 error
	}
	GetAllDesiredLRPsStub        func() ([]models.DesiredLRP, error)
	getAllDesiredLRPsMutex       sync.RWMutex
	getAllDesiredLRPsArgsForCall []struct{}
	getAllDesiredLRPsReturns     struct {
		result1 []models.DesiredLRP
		result2 error
	}
	GetAllActualLRPsStub        func() ([]models.ActualLRP, error)
	getAllActualLRPsMutex       sync.RWMutex
	getAllActualLRPsArgsForCall []struct{}
	getAllActualLRPsReturns     struct {
		result1 []models.ActualLRP
		result2 error
	}
	NewRuntimeMetricsLockStub        func(runtimeMetricsID string, interval time.Duration) ifrit.Runner
	newRuntimeMetricsLockMutex       sync.RWMutex
	newRuntimeMetricsLockArgsForCall []struct {
		runtimeMetricsID string
		interval         time.Duration
	}
	newRuntimeMetricsLockReturns struct {
		result1 ifrit.Runner
	}
}

func (fake *FakeMetricsBBS) GetAllTasks() ([]models.Task, error) {
	fake.getAllTasksMutex.Lock()
	fake.getAllTasksArgsForCall = append(fake.getAllTasksArgsForCall, struct{}{})
	fake.getAllTasksMutex.Unlock()
	if fake.GetAllTasksStub != nil {
		return fake.GetAllTasksStub()
	} else {
		return fake.getAllTasksReturns.result1, fake.getAllTasksReturns.result2
	}
}

func (fake *FakeMetricsBBS) GetAllTasksCallCount() int {
	fake.getAllTasksMutex.RLock()
	defer fake.getAllTasksMutex.RUnlock()
	return len(fake.getAllTasksArgsForCall)
}

func (fake *FakeMetricsBBS) GetAllTasksReturns(result1 []models.Task, result2 error) {
	fake.GetAllTasksStub = nil
	fake.getAllTasksReturns = struct {
		result1 []models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsBBS) GetServiceRegistrations() (models.ServiceRegistrations, error) {
	fake.getServiceRegistrationsMutex.Lock()
	fake.getServiceRegistrationsArgsForCall = append(fake.getServiceRegistrationsArgsForCall, struct{}{})
	fake.getServiceRegistrationsMutex.Unlock()
	if fake.GetServiceRegistrationsStub != nil {
		return fake.GetServiceRegistrationsStub()
	} else {
		return fake.getServiceRegistrationsReturns.result1, fake.getServiceRegistrationsReturns.result2
	}
}

func (fake *FakeMetricsBBS) GetServiceRegistrationsCallCount() int {
	fake.getServiceRegistrationsMutex.RLock()
	defer fake.getServiceRegistrationsMutex.RUnlock()
	return len(fake.getServiceRegistrationsArgsForCall)
}

func (fake *FakeMetricsBBS) GetServiceRegistrationsReturns(result1 models.ServiceRegistrations, result2 error) {
	fake.GetServiceRegistrationsStub = nil
	fake.getServiceRegistrationsReturns = struct {
		result1 models.ServiceRegistrations
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsBBS) Freshnesses() ([]models.Freshness, error) {
	fake.freshnessesMutex.Lock()
	fake.freshnessesArgsForCall = append(fake.freshnessesArgsForCall, struct{}{})
	fake.freshnessesMutex.Unlock()
	if fake.FreshnessesStub != nil {
		return fake.FreshnessesStub()
	} else {
		return fake.freshnessesReturns.result1, fake.freshnessesReturns.result2
	}
}

func (fake *FakeMetricsBBS) FreshnessesCallCount() int {
	fake.freshnessesMutex.RLock()
	defer fake.freshnessesMutex.RUnlock()
	return len(fake.freshnessesArgsForCall)
}

func (fake *FakeMetricsBBS) FreshnessesReturns(result1 []models.Freshness, result2 error) {
	fake.FreshnessesStub = nil
	fake.freshnessesReturns = struct {
		result1 []models.Freshness
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsBBS) GetAllDesiredLRPs() ([]models.DesiredLRP, error) {
	fake.getAllDesiredLRPsMutex.Lock()
	fake.getAllDesiredLRPsArgsForCall = append(fake.getAllDesiredLRPsArgsForCall, struct{}{})
	fake.getAllDesiredLRPsMutex.Unlock()
	if fake.GetAllDesiredLRPsStub != nil {
		return fake.GetAllDesiredLRPsStub()
	} else {
		return fake.getAllDesiredLRPsReturns.result1, fake.getAllDesiredLRPsReturns.result2
	}
}

func (fake *FakeMetricsBBS) GetAllDesiredLRPsCallCount() int {
	fake.getAllDesiredLRPsMutex.RLock()
	defer fake.getAllDesiredLRPsMutex.RUnlock()
	return len(fake.getAllDesiredLRPsArgsForCall)
}

func (fake *FakeMetricsBBS) GetAllDesiredLRPsReturns(result1 []models.DesiredLRP, result2 error) {
	fake.GetAllDesiredLRPsStub = nil
	fake.getAllDesiredLRPsReturns = struct {
		result1 []models.DesiredLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsBBS) GetAllActualLRPs() ([]models.ActualLRP, error) {
	fake.getAllActualLRPsMutex.Lock()
	fake.getAllActualLRPsArgsForCall = append(fake.getAllActualLRPsArgsForCall, struct{}{})
	fake.getAllActualLRPsMutex.Unlock()
	if fake.GetAllActualLRPsStub != nil {
		return fake.GetAllActualLRPsStub()
	} else {
		return fake.getAllActualLRPsReturns.result1, fake.getAllActualLRPsReturns.result2
	}
}

func (fake *FakeMetricsBBS) GetAllActualLRPsCallCount() int {
	fake.getAllActualLRPsMutex.RLock()
	defer fake.getAllActualLRPsMutex.RUnlock()
	return len(fake.getAllActualLRPsArgsForCall)
}

func (fake *FakeMetricsBBS) GetAllActualLRPsReturns(result1 []models.ActualLRP, result2 error) {
	fake.GetAllActualLRPsStub = nil
	fake.getAllActualLRPsReturns = struct {
		result1 []models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeMetricsBBS) NewRuntimeMetricsLock(runtimeMetricsID string, interval time.Duration) ifrit.Runner {
	fake.newRuntimeMetricsLockMutex.Lock()
	fake.newRuntimeMetricsLockArgsForCall = append(fake.newRuntimeMetricsLockArgsForCall, struct {
		runtimeMetricsID string
		interval         time.Duration
	}{runtimeMetricsID, interval})
	fake.newRuntimeMetricsLockMutex.Unlock()
	if fake.NewRuntimeMetricsLockStub != nil {
		return fake.NewRuntimeMetricsLockStub(runtimeMetricsID, interval)
	} else {
		return fake.newRuntimeMetricsLockReturns.result1
	}
}

func (fake *FakeMetricsBBS) NewRuntimeMetricsLockCallCount() int {
	fake.newRuntimeMetricsLockMutex.RLock()
	defer fake.newRuntimeMetricsLockMutex.RUnlock()
	return len(fake.newRuntimeMetricsLockArgsForCall)
}

func (fake *FakeMetricsBBS) NewRuntimeMetricsLockArgsForCall(i int) (string, time.Duration) {
	fake.newRuntimeMetricsLockMutex.RLock()
	defer fake.newRuntimeMetricsLockMutex.RUnlock()
	return fake.newRuntimeMetricsLockArgsForCall[i].runtimeMetricsID, fake.newRuntimeMetricsLockArgsForCall[i].interval
}

func (fake *FakeMetricsBBS) NewRuntimeMetricsLockReturns(result1 ifrit.Runner) {
	fake.NewRuntimeMetricsLockStub = nil
	fake.newRuntimeMetricsLockReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

var _ bbs.MetricsBBS = new(FakeMetricsBBS)
