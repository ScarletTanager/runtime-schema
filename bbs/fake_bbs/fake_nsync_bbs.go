// This file was generated by counterfeiter
package fake_bbs

import (
	"sync"
	"time"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs"
	"github.com/tedsuo/ifrit"
)

type FakeNsyncBBS struct {
	NewNsyncBulkerLockStub        func(bulkerID string, retryInterval time.Duration) ifrit.Runner
	newNsyncBulkerLockMutex       sync.RWMutex
	newNsyncBulkerLockArgsForCall []struct {
		bulkerID      string
		retryInterval time.Duration
	}
	newNsyncBulkerLockReturns struct {
		result1 ifrit.Runner
	}
}

func (fake *FakeNsyncBBS) NewNsyncBulkerLock(bulkerID string, retryInterval time.Duration) ifrit.Runner {
	fake.newNsyncBulkerLockMutex.Lock()
	fake.newNsyncBulkerLockArgsForCall = append(fake.newNsyncBulkerLockArgsForCall, struct {
		bulkerID      string
		retryInterval time.Duration
	}{bulkerID, retryInterval})
	fake.newNsyncBulkerLockMutex.Unlock()
	if fake.NewNsyncBulkerLockStub != nil {
		return fake.NewNsyncBulkerLockStub(bulkerID, retryInterval)
	} else {
		return fake.newNsyncBulkerLockReturns.result1
	}
}

func (fake *FakeNsyncBBS) NewNsyncBulkerLockCallCount() int {
	fake.newNsyncBulkerLockMutex.RLock()
	defer fake.newNsyncBulkerLockMutex.RUnlock()
	return len(fake.newNsyncBulkerLockArgsForCall)
}

func (fake *FakeNsyncBBS) NewNsyncBulkerLockArgsForCall(i int) (string, time.Duration) {
	fake.newNsyncBulkerLockMutex.RLock()
	defer fake.newNsyncBulkerLockMutex.RUnlock()
	return fake.newNsyncBulkerLockArgsForCall[i].bulkerID, fake.newNsyncBulkerLockArgsForCall[i].retryInterval
}

func (fake *FakeNsyncBBS) NewNsyncBulkerLockReturns(result1 ifrit.Runner) {
	fake.NewNsyncBulkerLockStub = nil
	fake.newNsyncBulkerLockReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

var _ bbs.NsyncBBS = new(FakeNsyncBBS)
