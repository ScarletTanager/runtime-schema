// This file was generated by counterfeiter
package fake_bbs

import (
	"sync"
	"time"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs"
	_ "github.com/go-sql-driver/mysql"
	"github.com/tedsuo/ifrit"
)

type FakeNsyncBBS struct {
	NewNsyncBulkerLockStub        func(bulkerID string, interval time.Duration) ifrit.Runner
	newNsyncBulkerLockMutex       sync.RWMutex
	newNsyncBulkerLockArgsForCall []struct {
		bulkerID string
		interval time.Duration
	}
	newNsyncBulkerLockReturns struct {
		result1 ifrit.Runner
	}
	NewNsyncListenerLockStub        func(listenerID string, interval time.Duration) ifrit.Runner
	newNsyncListenerLockMutex       sync.RWMutex
	newNsyncListenerLockArgsForCall []struct {
		listenerID string
		interval   time.Duration
	}
	newNsyncListenerLockReturns struct {
		result1 ifrit.Runner
	}
}

func (fake *FakeNsyncBBS) NewNsyncBulkerLock(bulkerID string, interval time.Duration) ifrit.Runner {
	fake.newNsyncBulkerLockMutex.Lock()
	fake.newNsyncBulkerLockArgsForCall = append(fake.newNsyncBulkerLockArgsForCall, struct {
		bulkerID string
		interval time.Duration
	}{bulkerID, interval})
	fake.newNsyncBulkerLockMutex.Unlock()
	if fake.NewNsyncBulkerLockStub != nil {
		return fake.NewNsyncBulkerLockStub(bulkerID, interval)
	} else {
		return fake.newNsyncBulkerLockReturns.result1
	}
}

func (fake *FakeNsyncBBS) NewNsyncBulkerLockCallCount() int {
	fake.newNsyncBulkerLockMutex.RLock()
	defer fake.newNsyncBulkerLockMutex.RUnlock()
	return len(fake.newNsyncBulkerLockArgsForCall)
}

func (fake *FakeNsyncBBS) NewNsyncBulkerLockArgsForCall(i int) (string, time.Duration) {
	fake.newNsyncBulkerLockMutex.RLock()
	defer fake.newNsyncBulkerLockMutex.RUnlock()
	return fake.newNsyncBulkerLockArgsForCall[i].bulkerID, fake.newNsyncBulkerLockArgsForCall[i].interval
}

func (fake *FakeNsyncBBS) NewNsyncBulkerLockReturns(result1 ifrit.Runner) {
	fake.NewNsyncBulkerLockStub = nil
	fake.newNsyncBulkerLockReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

func (fake *FakeNsyncBBS) NewNsyncListenerLock(listenerID string, interval time.Duration) ifrit.Runner {
	fake.newNsyncListenerLockMutex.Lock()
	fake.newNsyncListenerLockArgsForCall = append(fake.newNsyncListenerLockArgsForCall, struct {
		listenerID string
		interval   time.Duration
	}{listenerID, interval})
	fake.newNsyncListenerLockMutex.Unlock()
	if fake.NewNsyncListenerLockStub != nil {
		return fake.NewNsyncListenerLockStub(listenerID, interval)
	} else {
		return fake.newNsyncListenerLockReturns.result1
	}
}

func (fake *FakeNsyncBBS) NewNsyncListenerLockCallCount() int {
	fake.newNsyncListenerLockMutex.RLock()
	defer fake.newNsyncListenerLockMutex.RUnlock()
	return len(fake.newNsyncListenerLockArgsForCall)
}

func (fake *FakeNsyncBBS) NewNsyncListenerLockArgsForCall(i int) (string, time.Duration) {
	fake.newNsyncListenerLockMutex.RLock()
	defer fake.newNsyncListenerLockMutex.RUnlock()
	return fake.newNsyncListenerLockArgsForCall[i].listenerID, fake.newNsyncListenerLockArgsForCall[i].interval
}

func (fake *FakeNsyncBBS) NewNsyncListenerLockReturns(result1 ifrit.Runner) {
	fake.NewNsyncListenerLockStub = nil
	fake.newNsyncListenerLockReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

var _ bbs.NsyncBBS = new(FakeNsyncBBS)
