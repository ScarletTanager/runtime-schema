// This file was generated by counterfeiter
package fake_bbs

import (
	"sync"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
)

type FakeReceptorBBS struct {
	DesireTaskStub        func(models.Task) error
	desireTaskMutex       sync.RWMutex
	desireTaskArgsForCall []struct {
		arg1 models.Task
	}
	desireTaskReturns struct {
		result1 error
	}
	TasksStub              func() ([]models.Task, error)
	getAllTasksMutex       sync.RWMutex
	getAllTasksArgsForCall []struct{}
	getAllTasksReturns     struct {
		result1 []models.Task
		result2 error
	}
	TasksByDomainStub              func(domain string) ([]models.Task, error)
	getAllTasksByDomainMutex       sync.RWMutex
	getAllTasksByDomainArgsForCall []struct {
		domain string
	}
	getAllTasksByDomainReturns struct {
		result1 []models.Task
		result2 error
	}
	TaskByGuidStub           func(taskGuid string) (models.Task, error)
	getTaskByGuidMutex       sync.RWMutex
	getTaskByGuidArgsForCall []struct {
		taskGuid string
	}
	getTaskByGuidReturns struct {
		result1 models.Task
		result2 error
	}
	ResolvingTaskStub        func(taskGuid string) error
	resolvingTaskMutex       sync.RWMutex
	resolvingTaskArgsForCall []struct {
		taskGuid string
	}
	resolvingTaskReturns struct {
		result1 error
	}
	ResolveTaskStub        func(taskGuid string) error
	resolveTaskMutex       sync.RWMutex
	resolveTaskArgsForCall []struct {
		taskGuid string
	}
	resolveTaskReturns struct {
		result1 error
	}
	CancelTaskStub        func(taskGuid string) error
	cancelTaskMutex       sync.RWMutex
	cancelTaskArgsForCall []struct {
		taskGuid string
	}
	cancelTaskReturns struct {
		result1 error
	}
	WatchForCompletedTaskStub        func() (<-chan models.Task, chan<- bool, <-chan error)
	watchForCompletedTaskMutex       sync.RWMutex
	watchForCompletedTaskArgsForCall []struct{}
	watchForCompletedTaskReturns     struct {
		result1 <-chan models.Task
		result2 chan<- bool
		result3 <-chan error
	}
	DesireLRPStub        func(models.DesiredLRP) error
	desireLRPMutex       sync.RWMutex
	desireLRPArgsForCall []struct {
		arg1 models.DesiredLRP
	}
	desireLRPReturns struct {
		result1 error
	}
	UpdateDesiredLRPStub        func(processGuid string, update models.DesiredLRPUpdate) error
	updateDesiredLRPMutex       sync.RWMutex
	updateDesiredLRPArgsForCall []struct {
		processGuid string
		update      models.DesiredLRPUpdate
	}
	updateDesiredLRPReturns struct {
		result1 error
	}
	RemoveDesiredLRPByProcessGuidStub        func(processGuid string) error
	removeDesiredLRPByProcessGuidMutex       sync.RWMutex
	removeDesiredLRPByProcessGuidArgsForCall []struct {
		processGuid string
	}
	removeDesiredLRPByProcessGuidReturns struct {
		result1 error
	}
	DesiredLRPsStub              func() ([]models.DesiredLRP, error)
	getAllDesiredLRPsMutex       sync.RWMutex
	getAllDesiredLRPsArgsForCall []struct{}
	getAllDesiredLRPsReturns     struct {
		result1 []models.DesiredLRP
		result2 error
	}
	DesiredLRPsByDomainStub              func(domain string) ([]models.DesiredLRP, error)
	getAllDesiredLRPsByDomainMutex       sync.RWMutex
	getAllDesiredLRPsByDomainArgsForCall []struct {
		domain string
	}
	getAllDesiredLRPsByDomainReturns struct {
		result1 []models.DesiredLRP
		result2 error
	}
	DesiredLRPByProcessGuidStub           func(processGuid string) (models.DesiredLRP, error)
	getDesiredLRPByProcessGuidMutex       sync.RWMutex
	getDesiredLRPByProcessGuidArgsForCall []struct {
		processGuid string
	}
	getDesiredLRPByProcessGuidReturns struct {
		result1 models.DesiredLRP
		result2 error
	}
	ActualLRPsStub              func() ([]models.ActualLRP, error)
	getAllActualLRPsMutex       sync.RWMutex
	getAllActualLRPsArgsForCall []struct{}
	getAllActualLRPsReturns     struct {
		result1 []models.ActualLRP
		result2 error
	}
	ActualLRPsByDomainStub              func(domain string) ([]models.ActualLRP, error)
	getAllActualLRPsByDomainMutex       sync.RWMutex
	getAllActualLRPsByDomainArgsForCall []struct {
		domain string
	}
	getAllActualLRPsByDomainReturns struct {
		result1 []models.ActualLRP
		result2 error
	}
	ActualLRPsByProcessGuidStub           func(string) ([]models.ActualLRP, error)
	getActualLRPsByProcessGuidMutex       sync.RWMutex
	getActualLRPsByProcessGuidArgsForCall []struct {
		arg1 string
	}
	getActualLRPsByProcessGuidReturns struct {
		result1 []models.ActualLRP
		result2 error
	}
	ActualLRPsByProcessGuidAndIndexStub           func(string, int) ([]models.ActualLRP, error)
	getActualLRPsByProcessGuidAndIndexMutex       sync.RWMutex
	getActualLRPsByProcessGuidAndIndexArgsForCall []struct {
		arg1 string
		arg2 int
	}
	getActualLRPsByProcessGuidAndIndexReturns struct {
		result1 []models.ActualLRP
		result2 error
	}
	RequestStopLRPInstancesStub        func(stopInstances []models.StopLRPInstance) error
	requestStopLRPInstancesMutex       sync.RWMutex
	requestStopLRPInstancesArgsForCall []struct {
		stopInstances []models.StopLRPInstance
	}
	requestStopLRPInstancesReturns struct {
		result1 error
	}
	CellsStub              func() ([]models.CellPresence, error)
	getAllCellsMutex       sync.RWMutex
	getAllCellsArgsForCall []struct{}
	getAllCellsReturns     struct {
		result1 []models.CellPresence
		result2 error
	}
	BumpFreshnessStub        func(models.Freshness) error
	bumpFreshnessMutex       sync.RWMutex
	bumpFreshnessArgsForCall []struct {
		arg1 models.Freshness
	}
	bumpFreshnessReturns struct {
		result1 error
	}
	FreshnessesStub        func() ([]models.Freshness, error)
	freshnessesMutex       sync.RWMutex
	freshnessesArgsForCall []struct{}
	freshnessesReturns     struct {
		result1 []models.Freshness
		result2 error
	}
}

func (fake *FakeReceptorBBS) DesireTask(arg1 models.Task) error {
	fake.desireTaskMutex.Lock()
	fake.desireTaskArgsForCall = append(fake.desireTaskArgsForCall, struct {
		arg1 models.Task
	}{arg1})
	fake.desireTaskMutex.Unlock()
	if fake.DesireTaskStub != nil {
		return fake.DesireTaskStub(arg1)
	} else {
		return fake.desireTaskReturns.result1
	}
}

func (fake *FakeReceptorBBS) DesireTaskCallCount() int {
	fake.desireTaskMutex.RLock()
	defer fake.desireTaskMutex.RUnlock()
	return len(fake.desireTaskArgsForCall)
}

func (fake *FakeReceptorBBS) DesireTaskArgsForCall(i int) models.Task {
	fake.desireTaskMutex.RLock()
	defer fake.desireTaskMutex.RUnlock()
	return fake.desireTaskArgsForCall[i].arg1
}

func (fake *FakeReceptorBBS) DesireTaskReturns(result1 error) {
	fake.DesireTaskStub = nil
	fake.desireTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) Tasks() ([]models.Task, error) {
	fake.getAllTasksMutex.Lock()
	fake.getAllTasksArgsForCall = append(fake.getAllTasksArgsForCall, struct{}{})
	fake.getAllTasksMutex.Unlock()
	if fake.TasksStub != nil {
		return fake.TasksStub()
	} else {
		return fake.getAllTasksReturns.result1, fake.getAllTasksReturns.result2
	}
}

func (fake *FakeReceptorBBS) TasksCallCount() int {
	fake.getAllTasksMutex.RLock()
	defer fake.getAllTasksMutex.RUnlock()
	return len(fake.getAllTasksArgsForCall)
}

func (fake *FakeReceptorBBS) TasksReturns(result1 []models.Task, result2 error) {
	fake.TasksStub = nil
	fake.getAllTasksReturns = struct {
		result1 []models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) TasksByDomain(domain string) ([]models.Task, error) {
	fake.getAllTasksByDomainMutex.Lock()
	fake.getAllTasksByDomainArgsForCall = append(fake.getAllTasksByDomainArgsForCall, struct {
		domain string
	}{domain})
	fake.getAllTasksByDomainMutex.Unlock()
	if fake.TasksByDomainStub != nil {
		return fake.TasksByDomainStub(domain)
	} else {
		return fake.getAllTasksByDomainReturns.result1, fake.getAllTasksByDomainReturns.result2
	}
}

func (fake *FakeReceptorBBS) TasksByDomainCallCount() int {
	fake.getAllTasksByDomainMutex.RLock()
	defer fake.getAllTasksByDomainMutex.RUnlock()
	return len(fake.getAllTasksByDomainArgsForCall)
}

func (fake *FakeReceptorBBS) TasksByDomainArgsForCall(i int) string {
	fake.getAllTasksByDomainMutex.RLock()
	defer fake.getAllTasksByDomainMutex.RUnlock()
	return fake.getAllTasksByDomainArgsForCall[i].domain
}

func (fake *FakeReceptorBBS) TasksByDomainReturns(result1 []models.Task, result2 error) {
	fake.TasksByDomainStub = nil
	fake.getAllTasksByDomainReturns = struct {
		result1 []models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) TaskByGuid(taskGuid string) (models.Task, error) {
	fake.getTaskByGuidMutex.Lock()
	fake.getTaskByGuidArgsForCall = append(fake.getTaskByGuidArgsForCall, struct {
		taskGuid string
	}{taskGuid})
	fake.getTaskByGuidMutex.Unlock()
	if fake.TaskByGuidStub != nil {
		return fake.TaskByGuidStub(taskGuid)
	} else {
		return fake.getTaskByGuidReturns.result1, fake.getTaskByGuidReturns.result2
	}
}

func (fake *FakeReceptorBBS) TaskByGuidCallCount() int {
	fake.getTaskByGuidMutex.RLock()
	defer fake.getTaskByGuidMutex.RUnlock()
	return len(fake.getTaskByGuidArgsForCall)
}

func (fake *FakeReceptorBBS) TaskByGuidArgsForCall(i int) string {
	fake.getTaskByGuidMutex.RLock()
	defer fake.getTaskByGuidMutex.RUnlock()
	return fake.getTaskByGuidArgsForCall[i].taskGuid
}

func (fake *FakeReceptorBBS) TaskByGuidReturns(result1 models.Task, result2 error) {
	fake.TaskByGuidStub = nil
	fake.getTaskByGuidReturns = struct {
		result1 models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) ResolvingTask(taskGuid string) error {
	fake.resolvingTaskMutex.Lock()
	fake.resolvingTaskArgsForCall = append(fake.resolvingTaskArgsForCall, struct {
		taskGuid string
	}{taskGuid})
	fake.resolvingTaskMutex.Unlock()
	if fake.ResolvingTaskStub != nil {
		return fake.ResolvingTaskStub(taskGuid)
	} else {
		return fake.resolvingTaskReturns.result1
	}
}

func (fake *FakeReceptorBBS) ResolvingTaskCallCount() int {
	fake.resolvingTaskMutex.RLock()
	defer fake.resolvingTaskMutex.RUnlock()
	return len(fake.resolvingTaskArgsForCall)
}

func (fake *FakeReceptorBBS) ResolvingTaskArgsForCall(i int) string {
	fake.resolvingTaskMutex.RLock()
	defer fake.resolvingTaskMutex.RUnlock()
	return fake.resolvingTaskArgsForCall[i].taskGuid
}

func (fake *FakeReceptorBBS) ResolvingTaskReturns(result1 error) {
	fake.ResolvingTaskStub = nil
	fake.resolvingTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) ResolveTask(taskGuid string) error {
	fake.resolveTaskMutex.Lock()
	fake.resolveTaskArgsForCall = append(fake.resolveTaskArgsForCall, struct {
		taskGuid string
	}{taskGuid})
	fake.resolveTaskMutex.Unlock()
	if fake.ResolveTaskStub != nil {
		return fake.ResolveTaskStub(taskGuid)
	} else {
		return fake.resolveTaskReturns.result1
	}
}

func (fake *FakeReceptorBBS) ResolveTaskCallCount() int {
	fake.resolveTaskMutex.RLock()
	defer fake.resolveTaskMutex.RUnlock()
	return len(fake.resolveTaskArgsForCall)
}

func (fake *FakeReceptorBBS) ResolveTaskArgsForCall(i int) string {
	fake.resolveTaskMutex.RLock()
	defer fake.resolveTaskMutex.RUnlock()
	return fake.resolveTaskArgsForCall[i].taskGuid
}

func (fake *FakeReceptorBBS) ResolveTaskReturns(result1 error) {
	fake.ResolveTaskStub = nil
	fake.resolveTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) CancelTask(taskGuid string) error {
	fake.cancelTaskMutex.Lock()
	fake.cancelTaskArgsForCall = append(fake.cancelTaskArgsForCall, struct {
		taskGuid string
	}{taskGuid})
	fake.cancelTaskMutex.Unlock()
	if fake.CancelTaskStub != nil {
		return fake.CancelTaskStub(taskGuid)
	} else {
		return fake.cancelTaskReturns.result1
	}
}

func (fake *FakeReceptorBBS) CancelTaskCallCount() int {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	return len(fake.cancelTaskArgsForCall)
}

func (fake *FakeReceptorBBS) CancelTaskArgsForCall(i int) string {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	return fake.cancelTaskArgsForCall[i].taskGuid
}

func (fake *FakeReceptorBBS) CancelTaskReturns(result1 error) {
	fake.CancelTaskStub = nil
	fake.cancelTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) WatchForCompletedTask() (<-chan models.Task, chan<- bool, <-chan error) {
	fake.watchForCompletedTaskMutex.Lock()
	fake.watchForCompletedTaskArgsForCall = append(fake.watchForCompletedTaskArgsForCall, struct{}{})
	fake.watchForCompletedTaskMutex.Unlock()
	if fake.WatchForCompletedTaskStub != nil {
		return fake.WatchForCompletedTaskStub()
	} else {
		return fake.watchForCompletedTaskReturns.result1, fake.watchForCompletedTaskReturns.result2, fake.watchForCompletedTaskReturns.result3
	}
}

func (fake *FakeReceptorBBS) WatchForCompletedTaskCallCount() int {
	fake.watchForCompletedTaskMutex.RLock()
	defer fake.watchForCompletedTaskMutex.RUnlock()
	return len(fake.watchForCompletedTaskArgsForCall)
}

func (fake *FakeReceptorBBS) WatchForCompletedTaskReturns(result1 <-chan models.Task, result2 chan<- bool, result3 <-chan error) {
	fake.WatchForCompletedTaskStub = nil
	fake.watchForCompletedTaskReturns = struct {
		result1 <-chan models.Task
		result2 chan<- bool
		result3 <-chan error
	}{result1, result2, result3}
}

func (fake *FakeReceptorBBS) DesireLRP(arg1 models.DesiredLRP) error {
	fake.desireLRPMutex.Lock()
	fake.desireLRPArgsForCall = append(fake.desireLRPArgsForCall, struct {
		arg1 models.DesiredLRP
	}{arg1})
	fake.desireLRPMutex.Unlock()
	if fake.DesireLRPStub != nil {
		return fake.DesireLRPStub(arg1)
	} else {
		return fake.desireLRPReturns.result1
	}
}

func (fake *FakeReceptorBBS) DesireLRPCallCount() int {
	fake.desireLRPMutex.RLock()
	defer fake.desireLRPMutex.RUnlock()
	return len(fake.desireLRPArgsForCall)
}

func (fake *FakeReceptorBBS) DesireLRPArgsForCall(i int) models.DesiredLRP {
	fake.desireLRPMutex.RLock()
	defer fake.desireLRPMutex.RUnlock()
	return fake.desireLRPArgsForCall[i].arg1
}

func (fake *FakeReceptorBBS) DesireLRPReturns(result1 error) {
	fake.DesireLRPStub = nil
	fake.desireLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) UpdateDesiredLRP(processGuid string, update models.DesiredLRPUpdate) error {
	fake.updateDesiredLRPMutex.Lock()
	fake.updateDesiredLRPArgsForCall = append(fake.updateDesiredLRPArgsForCall, struct {
		processGuid string
		update      models.DesiredLRPUpdate
	}{processGuid, update})
	fake.updateDesiredLRPMutex.Unlock()
	if fake.UpdateDesiredLRPStub != nil {
		return fake.UpdateDesiredLRPStub(processGuid, update)
	} else {
		return fake.updateDesiredLRPReturns.result1
	}
}

func (fake *FakeReceptorBBS) UpdateDesiredLRPCallCount() int {
	fake.updateDesiredLRPMutex.RLock()
	defer fake.updateDesiredLRPMutex.RUnlock()
	return len(fake.updateDesiredLRPArgsForCall)
}

func (fake *FakeReceptorBBS) UpdateDesiredLRPArgsForCall(i int) (string, models.DesiredLRPUpdate) {
	fake.updateDesiredLRPMutex.RLock()
	defer fake.updateDesiredLRPMutex.RUnlock()
	return fake.updateDesiredLRPArgsForCall[i].processGuid, fake.updateDesiredLRPArgsForCall[i].update
}

func (fake *FakeReceptorBBS) UpdateDesiredLRPReturns(result1 error) {
	fake.UpdateDesiredLRPStub = nil
	fake.updateDesiredLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) RemoveDesiredLRPByProcessGuid(processGuid string) error {
	fake.removeDesiredLRPByProcessGuidMutex.Lock()
	fake.removeDesiredLRPByProcessGuidArgsForCall = append(fake.removeDesiredLRPByProcessGuidArgsForCall, struct {
		processGuid string
	}{processGuid})
	fake.removeDesiredLRPByProcessGuidMutex.Unlock()
	if fake.RemoveDesiredLRPByProcessGuidStub != nil {
		return fake.RemoveDesiredLRPByProcessGuidStub(processGuid)
	} else {
		return fake.removeDesiredLRPByProcessGuidReturns.result1
	}
}

func (fake *FakeReceptorBBS) RemoveDesiredLRPByProcessGuidCallCount() int {
	fake.removeDesiredLRPByProcessGuidMutex.RLock()
	defer fake.removeDesiredLRPByProcessGuidMutex.RUnlock()
	return len(fake.removeDesiredLRPByProcessGuidArgsForCall)
}

func (fake *FakeReceptorBBS) RemoveDesiredLRPByProcessGuidArgsForCall(i int) string {
	fake.removeDesiredLRPByProcessGuidMutex.RLock()
	defer fake.removeDesiredLRPByProcessGuidMutex.RUnlock()
	return fake.removeDesiredLRPByProcessGuidArgsForCall[i].processGuid
}

func (fake *FakeReceptorBBS) RemoveDesiredLRPByProcessGuidReturns(result1 error) {
	fake.RemoveDesiredLRPByProcessGuidStub = nil
	fake.removeDesiredLRPByProcessGuidReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) DesiredLRPs() ([]models.DesiredLRP, error) {
	fake.getAllDesiredLRPsMutex.Lock()
	fake.getAllDesiredLRPsArgsForCall = append(fake.getAllDesiredLRPsArgsForCall, struct{}{})
	fake.getAllDesiredLRPsMutex.Unlock()
	if fake.DesiredLRPsStub != nil {
		return fake.DesiredLRPsStub()
	} else {
		return fake.getAllDesiredLRPsReturns.result1, fake.getAllDesiredLRPsReturns.result2
	}
}

func (fake *FakeReceptorBBS) DesiredLRPsCallCount() int {
	fake.getAllDesiredLRPsMutex.RLock()
	defer fake.getAllDesiredLRPsMutex.RUnlock()
	return len(fake.getAllDesiredLRPsArgsForCall)
}

func (fake *FakeReceptorBBS) DesiredLRPsReturns(result1 []models.DesiredLRP, result2 error) {
	fake.DesiredLRPsStub = nil
	fake.getAllDesiredLRPsReturns = struct {
		result1 []models.DesiredLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) DesiredLRPsByDomain(domain string) ([]models.DesiredLRP, error) {
	fake.getAllDesiredLRPsByDomainMutex.Lock()
	fake.getAllDesiredLRPsByDomainArgsForCall = append(fake.getAllDesiredLRPsByDomainArgsForCall, struct {
		domain string
	}{domain})
	fake.getAllDesiredLRPsByDomainMutex.Unlock()
	if fake.DesiredLRPsByDomainStub != nil {
		return fake.DesiredLRPsByDomainStub(domain)
	} else {
		return fake.getAllDesiredLRPsByDomainReturns.result1, fake.getAllDesiredLRPsByDomainReturns.result2
	}
}

func (fake *FakeReceptorBBS) DesiredLRPsByDomainCallCount() int {
	fake.getAllDesiredLRPsByDomainMutex.RLock()
	defer fake.getAllDesiredLRPsByDomainMutex.RUnlock()
	return len(fake.getAllDesiredLRPsByDomainArgsForCall)
}

func (fake *FakeReceptorBBS) DesiredLRPsByDomainArgsForCall(i int) string {
	fake.getAllDesiredLRPsByDomainMutex.RLock()
	defer fake.getAllDesiredLRPsByDomainMutex.RUnlock()
	return fake.getAllDesiredLRPsByDomainArgsForCall[i].domain
}

func (fake *FakeReceptorBBS) DesiredLRPsByDomainReturns(result1 []models.DesiredLRP, result2 error) {
	fake.DesiredLRPsByDomainStub = nil
	fake.getAllDesiredLRPsByDomainReturns = struct {
		result1 []models.DesiredLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) DesiredLRPByProcessGuid(processGuid string) (models.DesiredLRP, error) {
	fake.getDesiredLRPByProcessGuidMutex.Lock()
	fake.getDesiredLRPByProcessGuidArgsForCall = append(fake.getDesiredLRPByProcessGuidArgsForCall, struct {
		processGuid string
	}{processGuid})
	fake.getDesiredLRPByProcessGuidMutex.Unlock()
	if fake.DesiredLRPByProcessGuidStub != nil {
		return fake.DesiredLRPByProcessGuidStub(processGuid)
	} else {
		return fake.getDesiredLRPByProcessGuidReturns.result1, fake.getDesiredLRPByProcessGuidReturns.result2
	}
}

func (fake *FakeReceptorBBS) DesiredLRPByProcessGuidCallCount() int {
	fake.getDesiredLRPByProcessGuidMutex.RLock()
	defer fake.getDesiredLRPByProcessGuidMutex.RUnlock()
	return len(fake.getDesiredLRPByProcessGuidArgsForCall)
}

func (fake *FakeReceptorBBS) DesiredLRPByProcessGuidArgsForCall(i int) string {
	fake.getDesiredLRPByProcessGuidMutex.RLock()
	defer fake.getDesiredLRPByProcessGuidMutex.RUnlock()
	return fake.getDesiredLRPByProcessGuidArgsForCall[i].processGuid
}

func (fake *FakeReceptorBBS) DesiredLRPByProcessGuidReturns(result1 models.DesiredLRP, result2 error) {
	fake.DesiredLRPByProcessGuidStub = nil
	fake.getDesiredLRPByProcessGuidReturns = struct {
		result1 models.DesiredLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) ActualLRPs() ([]models.ActualLRP, error) {
	fake.getAllActualLRPsMutex.Lock()
	fake.getAllActualLRPsArgsForCall = append(fake.getAllActualLRPsArgsForCall, struct{}{})
	fake.getAllActualLRPsMutex.Unlock()
	if fake.ActualLRPsStub != nil {
		return fake.ActualLRPsStub()
	} else {
		return fake.getAllActualLRPsReturns.result1, fake.getAllActualLRPsReturns.result2
	}
}

func (fake *FakeReceptorBBS) ActualLRPsCallCount() int {
	fake.getAllActualLRPsMutex.RLock()
	defer fake.getAllActualLRPsMutex.RUnlock()
	return len(fake.getAllActualLRPsArgsForCall)
}

func (fake *FakeReceptorBBS) ActualLRPsReturns(result1 []models.ActualLRP, result2 error) {
	fake.ActualLRPsStub = nil
	fake.getAllActualLRPsReturns = struct {
		result1 []models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) ActualLRPsByDomain(domain string) ([]models.ActualLRP, error) {
	fake.getAllActualLRPsByDomainMutex.Lock()
	fake.getAllActualLRPsByDomainArgsForCall = append(fake.getAllActualLRPsByDomainArgsForCall, struct {
		domain string
	}{domain})
	fake.getAllActualLRPsByDomainMutex.Unlock()
	if fake.ActualLRPsByDomainStub != nil {
		return fake.ActualLRPsByDomainStub(domain)
	} else {
		return fake.getAllActualLRPsByDomainReturns.result1, fake.getAllActualLRPsByDomainReturns.result2
	}
}

func (fake *FakeReceptorBBS) ActualLRPsByDomainCallCount() int {
	fake.getAllActualLRPsByDomainMutex.RLock()
	defer fake.getAllActualLRPsByDomainMutex.RUnlock()
	return len(fake.getAllActualLRPsByDomainArgsForCall)
}

func (fake *FakeReceptorBBS) ActualLRPsByDomainArgsForCall(i int) string {
	fake.getAllActualLRPsByDomainMutex.RLock()
	defer fake.getAllActualLRPsByDomainMutex.RUnlock()
	return fake.getAllActualLRPsByDomainArgsForCall[i].domain
}

func (fake *FakeReceptorBBS) ActualLRPsByDomainReturns(result1 []models.ActualLRP, result2 error) {
	fake.ActualLRPsByDomainStub = nil
	fake.getAllActualLRPsByDomainReturns = struct {
		result1 []models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuid(arg1 string) ([]models.ActualLRP, error) {
	fake.getActualLRPsByProcessGuidMutex.Lock()
	fake.getActualLRPsByProcessGuidArgsForCall = append(fake.getActualLRPsByProcessGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.getActualLRPsByProcessGuidMutex.Unlock()
	if fake.ActualLRPsByProcessGuidStub != nil {
		return fake.ActualLRPsByProcessGuidStub(arg1)
	} else {
		return fake.getActualLRPsByProcessGuidReturns.result1, fake.getActualLRPsByProcessGuidReturns.result2
	}
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuidCallCount() int {
	fake.getActualLRPsByProcessGuidMutex.RLock()
	defer fake.getActualLRPsByProcessGuidMutex.RUnlock()
	return len(fake.getActualLRPsByProcessGuidArgsForCall)
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuidArgsForCall(i int) string {
	fake.getActualLRPsByProcessGuidMutex.RLock()
	defer fake.getActualLRPsByProcessGuidMutex.RUnlock()
	return fake.getActualLRPsByProcessGuidArgsForCall[i].arg1
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuidReturns(result1 []models.ActualLRP, result2 error) {
	fake.ActualLRPsByProcessGuidStub = nil
	fake.getActualLRPsByProcessGuidReturns = struct {
		result1 []models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuidAndIndex(arg1 string, arg2 int) ([]models.ActualLRP, error) {
	fake.getActualLRPsByProcessGuidAndIndexMutex.Lock()
	fake.getActualLRPsByProcessGuidAndIndexArgsForCall = append(fake.getActualLRPsByProcessGuidAndIndexArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	fake.getActualLRPsByProcessGuidAndIndexMutex.Unlock()
	if fake.ActualLRPsByProcessGuidAndIndexStub != nil {
		return fake.ActualLRPsByProcessGuidAndIndexStub(arg1, arg2)
	} else {
		return fake.getActualLRPsByProcessGuidAndIndexReturns.result1, fake.getActualLRPsByProcessGuidAndIndexReturns.result2
	}
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuidAndIndexCallCount() int {
	fake.getActualLRPsByProcessGuidAndIndexMutex.RLock()
	defer fake.getActualLRPsByProcessGuidAndIndexMutex.RUnlock()
	return len(fake.getActualLRPsByProcessGuidAndIndexArgsForCall)
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuidAndIndexArgsForCall(i int) (string, int) {
	fake.getActualLRPsByProcessGuidAndIndexMutex.RLock()
	defer fake.getActualLRPsByProcessGuidAndIndexMutex.RUnlock()
	return fake.getActualLRPsByProcessGuidAndIndexArgsForCall[i].arg1, fake.getActualLRPsByProcessGuidAndIndexArgsForCall[i].arg2
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuidAndIndexReturns(result1 []models.ActualLRP, result2 error) {
	fake.ActualLRPsByProcessGuidAndIndexStub = nil
	fake.getActualLRPsByProcessGuidAndIndexReturns = struct {
		result1 []models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) RequestStopLRPInstances(stopInstances []models.StopLRPInstance) error {
	fake.requestStopLRPInstancesMutex.Lock()
	fake.requestStopLRPInstancesArgsForCall = append(fake.requestStopLRPInstancesArgsForCall, struct {
		stopInstances []models.StopLRPInstance
	}{stopInstances})
	fake.requestStopLRPInstancesMutex.Unlock()
	if fake.RequestStopLRPInstancesStub != nil {
		return fake.RequestStopLRPInstancesStub(stopInstances)
	} else {
		return fake.requestStopLRPInstancesReturns.result1
	}
}

func (fake *FakeReceptorBBS) RequestStopLRPInstancesCallCount() int {
	fake.requestStopLRPInstancesMutex.RLock()
	defer fake.requestStopLRPInstancesMutex.RUnlock()
	return len(fake.requestStopLRPInstancesArgsForCall)
}

func (fake *FakeReceptorBBS) RequestStopLRPInstancesArgsForCall(i int) []models.StopLRPInstance {
	fake.requestStopLRPInstancesMutex.RLock()
	defer fake.requestStopLRPInstancesMutex.RUnlock()
	return fake.requestStopLRPInstancesArgsForCall[i].stopInstances
}

func (fake *FakeReceptorBBS) RequestStopLRPInstancesReturns(result1 error) {
	fake.RequestStopLRPInstancesStub = nil
	fake.requestStopLRPInstancesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) Cells() ([]models.CellPresence, error) {
	fake.getAllCellsMutex.Lock()
	fake.getAllCellsArgsForCall = append(fake.getAllCellsArgsForCall, struct{}{})
	fake.getAllCellsMutex.Unlock()
	if fake.CellsStub != nil {
		return fake.CellsStub()
	} else {
		return fake.getAllCellsReturns.result1, fake.getAllCellsReturns.result2
	}
}

func (fake *FakeReceptorBBS) CellsCallCount() int {
	fake.getAllCellsMutex.RLock()
	defer fake.getAllCellsMutex.RUnlock()
	return len(fake.getAllCellsArgsForCall)
}

func (fake *FakeReceptorBBS) CellsReturns(result1 []models.CellPresence, result2 error) {
	fake.CellsStub = nil
	fake.getAllCellsReturns = struct {
		result1 []models.CellPresence
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) BumpFreshness(arg1 models.Freshness) error {
	fake.bumpFreshnessMutex.Lock()
	fake.bumpFreshnessArgsForCall = append(fake.bumpFreshnessArgsForCall, struct {
		arg1 models.Freshness
	}{arg1})
	fake.bumpFreshnessMutex.Unlock()
	if fake.BumpFreshnessStub != nil {
		return fake.BumpFreshnessStub(arg1)
	} else {
		return fake.bumpFreshnessReturns.result1
	}
}

func (fake *FakeReceptorBBS) BumpFreshnessCallCount() int {
	fake.bumpFreshnessMutex.RLock()
	defer fake.bumpFreshnessMutex.RUnlock()
	return len(fake.bumpFreshnessArgsForCall)
}

func (fake *FakeReceptorBBS) BumpFreshnessArgsForCall(i int) models.Freshness {
	fake.bumpFreshnessMutex.RLock()
	defer fake.bumpFreshnessMutex.RUnlock()
	return fake.bumpFreshnessArgsForCall[i].arg1
}

func (fake *FakeReceptorBBS) BumpFreshnessReturns(result1 error) {
	fake.BumpFreshnessStub = nil
	fake.bumpFreshnessReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) Freshnesses() ([]models.Freshness, error) {
	fake.freshnessesMutex.Lock()
	fake.freshnessesArgsForCall = append(fake.freshnessesArgsForCall, struct{}{})
	fake.freshnessesMutex.Unlock()
	if fake.FreshnessesStub != nil {
		return fake.FreshnessesStub()
	} else {
		return fake.freshnessesReturns.result1, fake.freshnessesReturns.result2
	}
}

func (fake *FakeReceptorBBS) FreshnessesCallCount() int {
	fake.freshnessesMutex.RLock()
	defer fake.freshnessesMutex.RUnlock()
	return len(fake.freshnessesArgsForCall)
}

func (fake *FakeReceptorBBS) FreshnessesReturns(result1 []models.Freshness, result2 error) {
	fake.FreshnessesStub = nil
	fake.freshnessesReturns = struct {
		result1 []models.Freshness
		result2 error
	}{result1, result2}
}

var _ bbs.ReceptorBBS = new(FakeReceptorBBS)
