// This file was generated by counterfeiter
package fake_bbs

import (
	"sync"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
)

type FakeReceptorBBS struct {
	DesireTaskStub        func(models.Task) error
	desireTaskMutex       sync.RWMutex
	desireTaskArgsForCall []struct {
		arg1 models.Task
	}
	desireTaskReturns struct {
		result1 error
	}
	TasksStub        func() ([]models.Task, error)
	tasksMutex       sync.RWMutex
	tasksArgsForCall []struct{}
	tasksReturns struct {
		result1 []models.Task
		result2 error
	}
	TasksByDomainStub        func(domain string) ([]models.Task, error)
	tasksByDomainMutex       sync.RWMutex
	tasksByDomainArgsForCall []struct {
		domain string
	}
	tasksByDomainReturns struct {
		result1 []models.Task
		result2 error
	}
	TaskByGuidStub        func(taskGuid string) (*models.Task, error)
	taskByGuidMutex       sync.RWMutex
	taskByGuidArgsForCall []struct {
		taskGuid string
	}
	taskByGuidReturns struct {
		result1 *models.Task
		result2 error
	}
	ResolvingTaskStub        func(taskGuid string) error
	resolvingTaskMutex       sync.RWMutex
	resolvingTaskArgsForCall []struct {
		taskGuid string
	}
	resolvingTaskReturns struct {
		result1 error
	}
	ResolveTaskStub        func(taskGuid string) error
	resolveTaskMutex       sync.RWMutex
	resolveTaskArgsForCall []struct {
		taskGuid string
	}
	resolveTaskReturns struct {
		result1 error
	}
	CancelTaskStub        func(taskGuid string) error
	cancelTaskMutex       sync.RWMutex
	cancelTaskArgsForCall []struct {
		taskGuid string
	}
	cancelTaskReturns struct {
		result1 error
	}
	WatchForCompletedTaskStub        func() (<-chan models.Task, chan<- bool, <-chan error)
	watchForCompletedTaskMutex       sync.RWMutex
	watchForCompletedTaskArgsForCall []struct{}
	watchForCompletedTaskReturns struct {
		result1 <-chan models.Task
		result2 chan<- bool
		result3 <-chan error
	}
	DesireLRPStub        func(models.DesiredLRP) error
	desireLRPMutex       sync.RWMutex
	desireLRPArgsForCall []struct {
		arg1 models.DesiredLRP
	}
	desireLRPReturns struct {
		result1 error
	}
	UpdateDesiredLRPStub        func(processGuid string, update models.DesiredLRPUpdate) error
	updateDesiredLRPMutex       sync.RWMutex
	updateDesiredLRPArgsForCall []struct {
		processGuid string
		update      models.DesiredLRPUpdate
	}
	updateDesiredLRPReturns struct {
		result1 error
	}
	RemoveDesiredLRPByProcessGuidStub        func(processGuid string) error
	removeDesiredLRPByProcessGuidMutex       sync.RWMutex
	removeDesiredLRPByProcessGuidArgsForCall []struct {
		processGuid string
	}
	removeDesiredLRPByProcessGuidReturns struct {
		result1 error
	}
	DesiredLRPsStub        func() ([]models.DesiredLRP, error)
	desiredLRPsMutex       sync.RWMutex
	desiredLRPsArgsForCall []struct{}
	desiredLRPsReturns struct {
		result1 []models.DesiredLRP
		result2 error
	}
	DesiredLRPsByDomainStub        func(domain string) ([]models.DesiredLRP, error)
	desiredLRPsByDomainMutex       sync.RWMutex
	desiredLRPsByDomainArgsForCall []struct {
		domain string
	}
	desiredLRPsByDomainReturns struct {
		result1 []models.DesiredLRP
		result2 error
	}
	DesiredLRPByProcessGuidStub        func(processGuid string) (*models.DesiredLRP, error)
	desiredLRPByProcessGuidMutex       sync.RWMutex
	desiredLRPByProcessGuidArgsForCall []struct {
		processGuid string
	}
	desiredLRPByProcessGuidReturns struct {
		result1 *models.DesiredLRP
		result2 error
	}
	ActualLRPsStub        func() ([]models.ActualLRP, error)
	actualLRPsMutex       sync.RWMutex
	actualLRPsArgsForCall []struct{}
	actualLRPsReturns struct {
		result1 []models.ActualLRP
		result2 error
	}
	ActualLRPsByDomainStub        func(domain string) ([]models.ActualLRP, error)
	actualLRPsByDomainMutex       sync.RWMutex
	actualLRPsByDomainArgsForCall []struct {
		domain string
	}
	actualLRPsByDomainReturns struct {
		result1 []models.ActualLRP
		result2 error
	}
	ActualLRPsByProcessGuidStub        func(string) ([]models.ActualLRP, error)
	actualLRPsByProcessGuidMutex       sync.RWMutex
	actualLRPsByProcessGuidArgsForCall []struct {
		arg1 string
	}
	actualLRPsByProcessGuidReturns struct {
		result1 []models.ActualLRP
		result2 error
	}
	ActualLRPsByProcessGuidAndIndexStub        func(string, int) ([]models.ActualLRP, error)
	actualLRPsByProcessGuidAndIndexMutex       sync.RWMutex
	actualLRPsByProcessGuidAndIndexArgsForCall []struct {
		arg1 string
		arg2 int
	}
	actualLRPsByProcessGuidAndIndexReturns struct {
		result1 []models.ActualLRP
		result2 error
	}
	RequestStopLRPInstancesStub        func(stopInstances []models.StopLRPInstance) error
	requestStopLRPInstancesMutex       sync.RWMutex
	requestStopLRPInstancesArgsForCall []struct {
		stopInstances []models.StopLRPInstance
	}
	requestStopLRPInstancesReturns struct {
		result1 error
	}
	CellsStub        func() ([]models.CellPresence, error)
	cellsMutex       sync.RWMutex
	cellsArgsForCall []struct{}
	cellsReturns struct {
		result1 []models.CellPresence
		result2 error
	}
	BumpFreshnessStub        func(models.Freshness) error
	bumpFreshnessMutex       sync.RWMutex
	bumpFreshnessArgsForCall []struct {
		arg1 models.Freshness
	}
	bumpFreshnessReturns struct {
		result1 error
	}
	FreshnessesStub        func() ([]models.Freshness, error)
	freshnessesMutex       sync.RWMutex
	freshnessesArgsForCall []struct{}
	freshnessesReturns struct {
		result1 []models.Freshness
		result2 error
	}
}

func (fake *FakeReceptorBBS) DesireTask(arg1 models.Task) error {
	fake.desireTaskMutex.Lock()
	fake.desireTaskArgsForCall = append(fake.desireTaskArgsForCall, struct {
		arg1 models.Task
	}{arg1})
	fake.desireTaskMutex.Unlock()
	if fake.DesireTaskStub != nil {
		return fake.DesireTaskStub(arg1)
	} else {
		return fake.desireTaskReturns.result1
	}
}

func (fake *FakeReceptorBBS) DesireTaskCallCount() int {
	fake.desireTaskMutex.RLock()
	defer fake.desireTaskMutex.RUnlock()
	return len(fake.desireTaskArgsForCall)
}

func (fake *FakeReceptorBBS) DesireTaskArgsForCall(i int) models.Task {
	fake.desireTaskMutex.RLock()
	defer fake.desireTaskMutex.RUnlock()
	return fake.desireTaskArgsForCall[i].arg1
}

func (fake *FakeReceptorBBS) DesireTaskReturns(result1 error) {
	fake.DesireTaskStub = nil
	fake.desireTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) Tasks() ([]models.Task, error) {
	fake.tasksMutex.Lock()
	fake.tasksArgsForCall = append(fake.tasksArgsForCall, struct{}{})
	fake.tasksMutex.Unlock()
	if fake.TasksStub != nil {
		return fake.TasksStub()
	} else {
		return fake.tasksReturns.result1, fake.tasksReturns.result2
	}
}

func (fake *FakeReceptorBBS) TasksCallCount() int {
	fake.tasksMutex.RLock()
	defer fake.tasksMutex.RUnlock()
	return len(fake.tasksArgsForCall)
}

func (fake *FakeReceptorBBS) TasksReturns(result1 []models.Task, result2 error) {
	fake.TasksStub = nil
	fake.tasksReturns = struct {
		result1 []models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) TasksByDomain(domain string) ([]models.Task, error) {
	fake.tasksByDomainMutex.Lock()
	fake.tasksByDomainArgsForCall = append(fake.tasksByDomainArgsForCall, struct {
		domain string
	}{domain})
	fake.tasksByDomainMutex.Unlock()
	if fake.TasksByDomainStub != nil {
		return fake.TasksByDomainStub(domain)
	} else {
		return fake.tasksByDomainReturns.result1, fake.tasksByDomainReturns.result2
	}
}

func (fake *FakeReceptorBBS) TasksByDomainCallCount() int {
	fake.tasksByDomainMutex.RLock()
	defer fake.tasksByDomainMutex.RUnlock()
	return len(fake.tasksByDomainArgsForCall)
}

func (fake *FakeReceptorBBS) TasksByDomainArgsForCall(i int) string {
	fake.tasksByDomainMutex.RLock()
	defer fake.tasksByDomainMutex.RUnlock()
	return fake.tasksByDomainArgsForCall[i].domain
}

func (fake *FakeReceptorBBS) TasksByDomainReturns(result1 []models.Task, result2 error) {
	fake.TasksByDomainStub = nil
	fake.tasksByDomainReturns = struct {
		result1 []models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) TaskByGuid(taskGuid string) (*models.Task, error) {
	fake.taskByGuidMutex.Lock()
	fake.taskByGuidArgsForCall = append(fake.taskByGuidArgsForCall, struct {
		taskGuid string
	}{taskGuid})
	fake.taskByGuidMutex.Unlock()
	if fake.TaskByGuidStub != nil {
		return fake.TaskByGuidStub(taskGuid)
	} else {
		return fake.taskByGuidReturns.result1, fake.taskByGuidReturns.result2
	}
}

func (fake *FakeReceptorBBS) TaskByGuidCallCount() int {
	fake.taskByGuidMutex.RLock()
	defer fake.taskByGuidMutex.RUnlock()
	return len(fake.taskByGuidArgsForCall)
}

func (fake *FakeReceptorBBS) TaskByGuidArgsForCall(i int) string {
	fake.taskByGuidMutex.RLock()
	defer fake.taskByGuidMutex.RUnlock()
	return fake.taskByGuidArgsForCall[i].taskGuid
}

func (fake *FakeReceptorBBS) TaskByGuidReturns(result1 *models.Task, result2 error) {
	fake.TaskByGuidStub = nil
	fake.taskByGuidReturns = struct {
		result1 *models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) ResolvingTask(taskGuid string) error {
	fake.resolvingTaskMutex.Lock()
	fake.resolvingTaskArgsForCall = append(fake.resolvingTaskArgsForCall, struct {
		taskGuid string
	}{taskGuid})
	fake.resolvingTaskMutex.Unlock()
	if fake.ResolvingTaskStub != nil {
		return fake.ResolvingTaskStub(taskGuid)
	} else {
		return fake.resolvingTaskReturns.result1
	}
}

func (fake *FakeReceptorBBS) ResolvingTaskCallCount() int {
	fake.resolvingTaskMutex.RLock()
	defer fake.resolvingTaskMutex.RUnlock()
	return len(fake.resolvingTaskArgsForCall)
}

func (fake *FakeReceptorBBS) ResolvingTaskArgsForCall(i int) string {
	fake.resolvingTaskMutex.RLock()
	defer fake.resolvingTaskMutex.RUnlock()
	return fake.resolvingTaskArgsForCall[i].taskGuid
}

func (fake *FakeReceptorBBS) ResolvingTaskReturns(result1 error) {
	fake.ResolvingTaskStub = nil
	fake.resolvingTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) ResolveTask(taskGuid string) error {
	fake.resolveTaskMutex.Lock()
	fake.resolveTaskArgsForCall = append(fake.resolveTaskArgsForCall, struct {
		taskGuid string
	}{taskGuid})
	fake.resolveTaskMutex.Unlock()
	if fake.ResolveTaskStub != nil {
		return fake.ResolveTaskStub(taskGuid)
	} else {
		return fake.resolveTaskReturns.result1
	}
}

func (fake *FakeReceptorBBS) ResolveTaskCallCount() int {
	fake.resolveTaskMutex.RLock()
	defer fake.resolveTaskMutex.RUnlock()
	return len(fake.resolveTaskArgsForCall)
}

func (fake *FakeReceptorBBS) ResolveTaskArgsForCall(i int) string {
	fake.resolveTaskMutex.RLock()
	defer fake.resolveTaskMutex.RUnlock()
	return fake.resolveTaskArgsForCall[i].taskGuid
}

func (fake *FakeReceptorBBS) ResolveTaskReturns(result1 error) {
	fake.ResolveTaskStub = nil
	fake.resolveTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) CancelTask(taskGuid string) error {
	fake.cancelTaskMutex.Lock()
	fake.cancelTaskArgsForCall = append(fake.cancelTaskArgsForCall, struct {
		taskGuid string
	}{taskGuid})
	fake.cancelTaskMutex.Unlock()
	if fake.CancelTaskStub != nil {
		return fake.CancelTaskStub(taskGuid)
	} else {
		return fake.cancelTaskReturns.result1
	}
}

func (fake *FakeReceptorBBS) CancelTaskCallCount() int {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	return len(fake.cancelTaskArgsForCall)
}

func (fake *FakeReceptorBBS) CancelTaskArgsForCall(i int) string {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	return fake.cancelTaskArgsForCall[i].taskGuid
}

func (fake *FakeReceptorBBS) CancelTaskReturns(result1 error) {
	fake.CancelTaskStub = nil
	fake.cancelTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) WatchForCompletedTask() (<-chan models.Task, chan<- bool, <-chan error) {
	fake.watchForCompletedTaskMutex.Lock()
	fake.watchForCompletedTaskArgsForCall = append(fake.watchForCompletedTaskArgsForCall, struct{}{})
	fake.watchForCompletedTaskMutex.Unlock()
	if fake.WatchForCompletedTaskStub != nil {
		return fake.WatchForCompletedTaskStub()
	} else {
		return fake.watchForCompletedTaskReturns.result1, fake.watchForCompletedTaskReturns.result2, fake.watchForCompletedTaskReturns.result3
	}
}

func (fake *FakeReceptorBBS) WatchForCompletedTaskCallCount() int {
	fake.watchForCompletedTaskMutex.RLock()
	defer fake.watchForCompletedTaskMutex.RUnlock()
	return len(fake.watchForCompletedTaskArgsForCall)
}

func (fake *FakeReceptorBBS) WatchForCompletedTaskReturns(result1 <-chan models.Task, result2 chan<- bool, result3 <-chan error) {
	fake.WatchForCompletedTaskStub = nil
	fake.watchForCompletedTaskReturns = struct {
		result1 <-chan models.Task
		result2 chan<- bool
		result3 <-chan error
	}{result1, result2, result3}
}

func (fake *FakeReceptorBBS) DesireLRP(arg1 models.DesiredLRP) error {
	fake.desireLRPMutex.Lock()
	fake.desireLRPArgsForCall = append(fake.desireLRPArgsForCall, struct {
		arg1 models.DesiredLRP
	}{arg1})
	fake.desireLRPMutex.Unlock()
	if fake.DesireLRPStub != nil {
		return fake.DesireLRPStub(arg1)
	} else {
		return fake.desireLRPReturns.result1
	}
}

func (fake *FakeReceptorBBS) DesireLRPCallCount() int {
	fake.desireLRPMutex.RLock()
	defer fake.desireLRPMutex.RUnlock()
	return len(fake.desireLRPArgsForCall)
}

func (fake *FakeReceptorBBS) DesireLRPArgsForCall(i int) models.DesiredLRP {
	fake.desireLRPMutex.RLock()
	defer fake.desireLRPMutex.RUnlock()
	return fake.desireLRPArgsForCall[i].arg1
}

func (fake *FakeReceptorBBS) DesireLRPReturns(result1 error) {
	fake.DesireLRPStub = nil
	fake.desireLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) UpdateDesiredLRP(processGuid string, update models.DesiredLRPUpdate) error {
	fake.updateDesiredLRPMutex.Lock()
	fake.updateDesiredLRPArgsForCall = append(fake.updateDesiredLRPArgsForCall, struct {
		processGuid string
		update      models.DesiredLRPUpdate
	}{processGuid, update})
	fake.updateDesiredLRPMutex.Unlock()
	if fake.UpdateDesiredLRPStub != nil {
		return fake.UpdateDesiredLRPStub(processGuid, update)
	} else {
		return fake.updateDesiredLRPReturns.result1
	}
}

func (fake *FakeReceptorBBS) UpdateDesiredLRPCallCount() int {
	fake.updateDesiredLRPMutex.RLock()
	defer fake.updateDesiredLRPMutex.RUnlock()
	return len(fake.updateDesiredLRPArgsForCall)
}

func (fake *FakeReceptorBBS) UpdateDesiredLRPArgsForCall(i int) (string, models.DesiredLRPUpdate) {
	fake.updateDesiredLRPMutex.RLock()
	defer fake.updateDesiredLRPMutex.RUnlock()
	return fake.updateDesiredLRPArgsForCall[i].processGuid, fake.updateDesiredLRPArgsForCall[i].update
}

func (fake *FakeReceptorBBS) UpdateDesiredLRPReturns(result1 error) {
	fake.UpdateDesiredLRPStub = nil
	fake.updateDesiredLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) RemoveDesiredLRPByProcessGuid(processGuid string) error {
	fake.removeDesiredLRPByProcessGuidMutex.Lock()
	fake.removeDesiredLRPByProcessGuidArgsForCall = append(fake.removeDesiredLRPByProcessGuidArgsForCall, struct {
		processGuid string
	}{processGuid})
	fake.removeDesiredLRPByProcessGuidMutex.Unlock()
	if fake.RemoveDesiredLRPByProcessGuidStub != nil {
		return fake.RemoveDesiredLRPByProcessGuidStub(processGuid)
	} else {
		return fake.removeDesiredLRPByProcessGuidReturns.result1
	}
}

func (fake *FakeReceptorBBS) RemoveDesiredLRPByProcessGuidCallCount() int {
	fake.removeDesiredLRPByProcessGuidMutex.RLock()
	defer fake.removeDesiredLRPByProcessGuidMutex.RUnlock()
	return len(fake.removeDesiredLRPByProcessGuidArgsForCall)
}

func (fake *FakeReceptorBBS) RemoveDesiredLRPByProcessGuidArgsForCall(i int) string {
	fake.removeDesiredLRPByProcessGuidMutex.RLock()
	defer fake.removeDesiredLRPByProcessGuidMutex.RUnlock()
	return fake.removeDesiredLRPByProcessGuidArgsForCall[i].processGuid
}

func (fake *FakeReceptorBBS) RemoveDesiredLRPByProcessGuidReturns(result1 error) {
	fake.RemoveDesiredLRPByProcessGuidStub = nil
	fake.removeDesiredLRPByProcessGuidReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) DesiredLRPs() ([]models.DesiredLRP, error) {
	fake.desiredLRPsMutex.Lock()
	fake.desiredLRPsArgsForCall = append(fake.desiredLRPsArgsForCall, struct{}{})
	fake.desiredLRPsMutex.Unlock()
	if fake.DesiredLRPsStub != nil {
		return fake.DesiredLRPsStub()
	} else {
		return fake.desiredLRPsReturns.result1, fake.desiredLRPsReturns.result2
	}
}

func (fake *FakeReceptorBBS) DesiredLRPsCallCount() int {
	fake.desiredLRPsMutex.RLock()
	defer fake.desiredLRPsMutex.RUnlock()
	return len(fake.desiredLRPsArgsForCall)
}

func (fake *FakeReceptorBBS) DesiredLRPsReturns(result1 []models.DesiredLRP, result2 error) {
	fake.DesiredLRPsStub = nil
	fake.desiredLRPsReturns = struct {
		result1 []models.DesiredLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) DesiredLRPsByDomain(domain string) ([]models.DesiredLRP, error) {
	fake.desiredLRPsByDomainMutex.Lock()
	fake.desiredLRPsByDomainArgsForCall = append(fake.desiredLRPsByDomainArgsForCall, struct {
		domain string
	}{domain})
	fake.desiredLRPsByDomainMutex.Unlock()
	if fake.DesiredLRPsByDomainStub != nil {
		return fake.DesiredLRPsByDomainStub(domain)
	} else {
		return fake.desiredLRPsByDomainReturns.result1, fake.desiredLRPsByDomainReturns.result2
	}
}

func (fake *FakeReceptorBBS) DesiredLRPsByDomainCallCount() int {
	fake.desiredLRPsByDomainMutex.RLock()
	defer fake.desiredLRPsByDomainMutex.RUnlock()
	return len(fake.desiredLRPsByDomainArgsForCall)
}

func (fake *FakeReceptorBBS) DesiredLRPsByDomainArgsForCall(i int) string {
	fake.desiredLRPsByDomainMutex.RLock()
	defer fake.desiredLRPsByDomainMutex.RUnlock()
	return fake.desiredLRPsByDomainArgsForCall[i].domain
}

func (fake *FakeReceptorBBS) DesiredLRPsByDomainReturns(result1 []models.DesiredLRP, result2 error) {
	fake.DesiredLRPsByDomainStub = nil
	fake.desiredLRPsByDomainReturns = struct {
		result1 []models.DesiredLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) DesiredLRPByProcessGuid(processGuid string) (*models.DesiredLRP, error) {
	fake.desiredLRPByProcessGuidMutex.Lock()
	fake.desiredLRPByProcessGuidArgsForCall = append(fake.desiredLRPByProcessGuidArgsForCall, struct {
		processGuid string
	}{processGuid})
	fake.desiredLRPByProcessGuidMutex.Unlock()
	if fake.DesiredLRPByProcessGuidStub != nil {
		return fake.DesiredLRPByProcessGuidStub(processGuid)
	} else {
		return fake.desiredLRPByProcessGuidReturns.result1, fake.desiredLRPByProcessGuidReturns.result2
	}
}

func (fake *FakeReceptorBBS) DesiredLRPByProcessGuidCallCount() int {
	fake.desiredLRPByProcessGuidMutex.RLock()
	defer fake.desiredLRPByProcessGuidMutex.RUnlock()
	return len(fake.desiredLRPByProcessGuidArgsForCall)
}

func (fake *FakeReceptorBBS) DesiredLRPByProcessGuidArgsForCall(i int) string {
	fake.desiredLRPByProcessGuidMutex.RLock()
	defer fake.desiredLRPByProcessGuidMutex.RUnlock()
	return fake.desiredLRPByProcessGuidArgsForCall[i].processGuid
}

func (fake *FakeReceptorBBS) DesiredLRPByProcessGuidReturns(result1 *models.DesiredLRP, result2 error) {
	fake.DesiredLRPByProcessGuidStub = nil
	fake.desiredLRPByProcessGuidReturns = struct {
		result1 *models.DesiredLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) ActualLRPs() ([]models.ActualLRP, error) {
	fake.actualLRPsMutex.Lock()
	fake.actualLRPsArgsForCall = append(fake.actualLRPsArgsForCall, struct{}{})
	fake.actualLRPsMutex.Unlock()
	if fake.ActualLRPsStub != nil {
		return fake.ActualLRPsStub()
	} else {
		return fake.actualLRPsReturns.result1, fake.actualLRPsReturns.result2
	}
}

func (fake *FakeReceptorBBS) ActualLRPsCallCount() int {
	fake.actualLRPsMutex.RLock()
	defer fake.actualLRPsMutex.RUnlock()
	return len(fake.actualLRPsArgsForCall)
}

func (fake *FakeReceptorBBS) ActualLRPsReturns(result1 []models.ActualLRP, result2 error) {
	fake.ActualLRPsStub = nil
	fake.actualLRPsReturns = struct {
		result1 []models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) ActualLRPsByDomain(domain string) ([]models.ActualLRP, error) {
	fake.actualLRPsByDomainMutex.Lock()
	fake.actualLRPsByDomainArgsForCall = append(fake.actualLRPsByDomainArgsForCall, struct {
		domain string
	}{domain})
	fake.actualLRPsByDomainMutex.Unlock()
	if fake.ActualLRPsByDomainStub != nil {
		return fake.ActualLRPsByDomainStub(domain)
	} else {
		return fake.actualLRPsByDomainReturns.result1, fake.actualLRPsByDomainReturns.result2
	}
}

func (fake *FakeReceptorBBS) ActualLRPsByDomainCallCount() int {
	fake.actualLRPsByDomainMutex.RLock()
	defer fake.actualLRPsByDomainMutex.RUnlock()
	return len(fake.actualLRPsByDomainArgsForCall)
}

func (fake *FakeReceptorBBS) ActualLRPsByDomainArgsForCall(i int) string {
	fake.actualLRPsByDomainMutex.RLock()
	defer fake.actualLRPsByDomainMutex.RUnlock()
	return fake.actualLRPsByDomainArgsForCall[i].domain
}

func (fake *FakeReceptorBBS) ActualLRPsByDomainReturns(result1 []models.ActualLRP, result2 error) {
	fake.ActualLRPsByDomainStub = nil
	fake.actualLRPsByDomainReturns = struct {
		result1 []models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuid(arg1 string) ([]models.ActualLRP, error) {
	fake.actualLRPsByProcessGuidMutex.Lock()
	fake.actualLRPsByProcessGuidArgsForCall = append(fake.actualLRPsByProcessGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.actualLRPsByProcessGuidMutex.Unlock()
	if fake.ActualLRPsByProcessGuidStub != nil {
		return fake.ActualLRPsByProcessGuidStub(arg1)
	} else {
		return fake.actualLRPsByProcessGuidReturns.result1, fake.actualLRPsByProcessGuidReturns.result2
	}
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuidCallCount() int {
	fake.actualLRPsByProcessGuidMutex.RLock()
	defer fake.actualLRPsByProcessGuidMutex.RUnlock()
	return len(fake.actualLRPsByProcessGuidArgsForCall)
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuidArgsForCall(i int) string {
	fake.actualLRPsByProcessGuidMutex.RLock()
	defer fake.actualLRPsByProcessGuidMutex.RUnlock()
	return fake.actualLRPsByProcessGuidArgsForCall[i].arg1
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuidReturns(result1 []models.ActualLRP, result2 error) {
	fake.ActualLRPsByProcessGuidStub = nil
	fake.actualLRPsByProcessGuidReturns = struct {
		result1 []models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuidAndIndex(arg1 string, arg2 int) ([]models.ActualLRP, error) {
	fake.actualLRPsByProcessGuidAndIndexMutex.Lock()
	fake.actualLRPsByProcessGuidAndIndexArgsForCall = append(fake.actualLRPsByProcessGuidAndIndexArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	fake.actualLRPsByProcessGuidAndIndexMutex.Unlock()
	if fake.ActualLRPsByProcessGuidAndIndexStub != nil {
		return fake.ActualLRPsByProcessGuidAndIndexStub(arg1, arg2)
	} else {
		return fake.actualLRPsByProcessGuidAndIndexReturns.result1, fake.actualLRPsByProcessGuidAndIndexReturns.result2
	}
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuidAndIndexCallCount() int {
	fake.actualLRPsByProcessGuidAndIndexMutex.RLock()
	defer fake.actualLRPsByProcessGuidAndIndexMutex.RUnlock()
	return len(fake.actualLRPsByProcessGuidAndIndexArgsForCall)
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuidAndIndexArgsForCall(i int) (string, int) {
	fake.actualLRPsByProcessGuidAndIndexMutex.RLock()
	defer fake.actualLRPsByProcessGuidAndIndexMutex.RUnlock()
	return fake.actualLRPsByProcessGuidAndIndexArgsForCall[i].arg1, fake.actualLRPsByProcessGuidAndIndexArgsForCall[i].arg2
}

func (fake *FakeReceptorBBS) ActualLRPsByProcessGuidAndIndexReturns(result1 []models.ActualLRP, result2 error) {
	fake.ActualLRPsByProcessGuidAndIndexStub = nil
	fake.actualLRPsByProcessGuidAndIndexReturns = struct {
		result1 []models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) RequestStopLRPInstances(stopInstances []models.StopLRPInstance) error {
	fake.requestStopLRPInstancesMutex.Lock()
	fake.requestStopLRPInstancesArgsForCall = append(fake.requestStopLRPInstancesArgsForCall, struct {
		stopInstances []models.StopLRPInstance
	}{stopInstances})
	fake.requestStopLRPInstancesMutex.Unlock()
	if fake.RequestStopLRPInstancesStub != nil {
		return fake.RequestStopLRPInstancesStub(stopInstances)
	} else {
		return fake.requestStopLRPInstancesReturns.result1
	}
}

func (fake *FakeReceptorBBS) RequestStopLRPInstancesCallCount() int {
	fake.requestStopLRPInstancesMutex.RLock()
	defer fake.requestStopLRPInstancesMutex.RUnlock()
	return len(fake.requestStopLRPInstancesArgsForCall)
}

func (fake *FakeReceptorBBS) RequestStopLRPInstancesArgsForCall(i int) []models.StopLRPInstance {
	fake.requestStopLRPInstancesMutex.RLock()
	defer fake.requestStopLRPInstancesMutex.RUnlock()
	return fake.requestStopLRPInstancesArgsForCall[i].stopInstances
}

func (fake *FakeReceptorBBS) RequestStopLRPInstancesReturns(result1 error) {
	fake.RequestStopLRPInstancesStub = nil
	fake.requestStopLRPInstancesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) Cells() ([]models.CellPresence, error) {
	fake.cellsMutex.Lock()
	fake.cellsArgsForCall = append(fake.cellsArgsForCall, struct{}{})
	fake.cellsMutex.Unlock()
	if fake.CellsStub != nil {
		return fake.CellsStub()
	} else {
		return fake.cellsReturns.result1, fake.cellsReturns.result2
	}
}

func (fake *FakeReceptorBBS) CellsCallCount() int {
	fake.cellsMutex.RLock()
	defer fake.cellsMutex.RUnlock()
	return len(fake.cellsArgsForCall)
}

func (fake *FakeReceptorBBS) CellsReturns(result1 []models.CellPresence, result2 error) {
	fake.CellsStub = nil
	fake.cellsReturns = struct {
		result1 []models.CellPresence
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) BumpFreshness(arg1 models.Freshness) error {
	fake.bumpFreshnessMutex.Lock()
	fake.bumpFreshnessArgsForCall = append(fake.bumpFreshnessArgsForCall, struct {
		arg1 models.Freshness
	}{arg1})
	fake.bumpFreshnessMutex.Unlock()
	if fake.BumpFreshnessStub != nil {
		return fake.BumpFreshnessStub(arg1)
	} else {
		return fake.bumpFreshnessReturns.result1
	}
}

func (fake *FakeReceptorBBS) BumpFreshnessCallCount() int {
	fake.bumpFreshnessMutex.RLock()
	defer fake.bumpFreshnessMutex.RUnlock()
	return len(fake.bumpFreshnessArgsForCall)
}

func (fake *FakeReceptorBBS) BumpFreshnessArgsForCall(i int) models.Freshness {
	fake.bumpFreshnessMutex.RLock()
	defer fake.bumpFreshnessMutex.RUnlock()
	return fake.bumpFreshnessArgsForCall[i].arg1
}

func (fake *FakeReceptorBBS) BumpFreshnessReturns(result1 error) {
	fake.BumpFreshnessStub = nil
	fake.bumpFreshnessReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) Freshnesses() ([]models.Freshness, error) {
	fake.freshnessesMutex.Lock()
	fake.freshnessesArgsForCall = append(fake.freshnessesArgsForCall, struct{}{})
	fake.freshnessesMutex.Unlock()
	if fake.FreshnessesStub != nil {
		return fake.FreshnessesStub()
	} else {
		return fake.freshnessesReturns.result1, fake.freshnessesReturns.result2
	}
}

func (fake *FakeReceptorBBS) FreshnessesCallCount() int {
	fake.freshnessesMutex.RLock()
	defer fake.freshnessesMutex.RUnlock()
	return len(fake.freshnessesArgsForCall)
}

func (fake *FakeReceptorBBS) FreshnessesReturns(result1 []models.Freshness, result2 error) {
	fake.FreshnessesStub = nil
	fake.freshnessesReturns = struct {
		result1 []models.Freshness
		result2 error
	}{result1, result2}
}

var _ bbs.ReceptorBBS = new(FakeReceptorBBS)
