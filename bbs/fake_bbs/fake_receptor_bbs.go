// This file was generated by counterfeiter
package fake_bbs

import (
	"sync"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
)

type FakeReceptorBBS struct {
	DesireTaskStub        func(models.Task) error
	desireTaskMutex       sync.RWMutex
	desireTaskArgsForCall []struct {
		arg1 models.Task
	}
	desireTaskReturns struct {
		result1 error
	}
	GetAllTasksStub        func() ([]models.Task, error)
	getAllTasksMutex       sync.RWMutex
	getAllTasksArgsForCall []struct{}
	getAllTasksReturns struct {
		result1 []models.Task
		result2 error
	}
	GetAllTasksByDomainStub        func(domain string) ([]models.Task, error)
	getAllTasksByDomainMutex       sync.RWMutex
	getAllTasksByDomainArgsForCall []struct {
		domain string
	}
	getAllTasksByDomainReturns struct {
		result1 []models.Task
		result2 error
	}
	GetTaskByGuidStub        func(taskGuid string) (models.Task, error)
	getTaskByGuidMutex       sync.RWMutex
	getTaskByGuidArgsForCall []struct {
		taskGuid string
	}
	getTaskByGuidReturns struct {
		result1 models.Task
		result2 error
	}
	ResolvingTaskStub        func(taskGuid string) error
	resolvingTaskMutex       sync.RWMutex
	resolvingTaskArgsForCall []struct {
		taskGuid string
	}
	resolvingTaskReturns struct {
		result1 error
	}
	ResolveTaskStub        func(taskGuid string) error
	resolveTaskMutex       sync.RWMutex
	resolveTaskArgsForCall []struct {
		taskGuid string
	}
	resolveTaskReturns struct {
		result1 error
	}
	WatchForCompletedTaskStub        func() (<-chan models.Task, chan<- bool, <-chan error)
	watchForCompletedTaskMutex       sync.RWMutex
	watchForCompletedTaskArgsForCall []struct{}
	watchForCompletedTaskReturns struct {
		result1 <-chan models.Task
		result2 chan<- bool
		result3 <-chan error
	}
	DesireLRPStub        func(models.DesiredLRP) error
	desireLRPMutex       sync.RWMutex
	desireLRPArgsForCall []struct {
		arg1 models.DesiredLRP
	}
	desireLRPReturns struct {
		result1 error
	}
	UpdateDesiredLRPStub        func(processGuid string, update models.DesiredLRPUpdate) error
	updateDesiredLRPMutex       sync.RWMutex
	updateDesiredLRPArgsForCall []struct {
		processGuid string
		update      models.DesiredLRPUpdate
	}
	updateDesiredLRPReturns struct {
		result1 error
	}
	GetAllDesiredLRPsStub        func() ([]models.DesiredLRP, error)
	getAllDesiredLRPsMutex       sync.RWMutex
	getAllDesiredLRPsArgsForCall []struct{}
	getAllDesiredLRPsReturns struct {
		result1 []models.DesiredLRP
		result2 error
	}
}

func (fake *FakeReceptorBBS) DesireTask(arg1 models.Task) error {
	fake.desireTaskMutex.Lock()
	fake.desireTaskArgsForCall = append(fake.desireTaskArgsForCall, struct {
		arg1 models.Task
	}{arg1})
	fake.desireTaskMutex.Unlock()
	if fake.DesireTaskStub != nil {
		return fake.DesireTaskStub(arg1)
	} else {
		return fake.desireTaskReturns.result1
	}
}

func (fake *FakeReceptorBBS) DesireTaskCallCount() int {
	fake.desireTaskMutex.RLock()
	defer fake.desireTaskMutex.RUnlock()
	return len(fake.desireTaskArgsForCall)
}

func (fake *FakeReceptorBBS) DesireTaskArgsForCall(i int) models.Task {
	fake.desireTaskMutex.RLock()
	defer fake.desireTaskMutex.RUnlock()
	return fake.desireTaskArgsForCall[i].arg1
}

func (fake *FakeReceptorBBS) DesireTaskReturns(result1 error) {
	fake.DesireTaskStub = nil
	fake.desireTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) GetAllTasks() ([]models.Task, error) {
	fake.getAllTasksMutex.Lock()
	fake.getAllTasksArgsForCall = append(fake.getAllTasksArgsForCall, struct{}{})
	fake.getAllTasksMutex.Unlock()
	if fake.GetAllTasksStub != nil {
		return fake.GetAllTasksStub()
	} else {
		return fake.getAllTasksReturns.result1, fake.getAllTasksReturns.result2
	}
}

func (fake *FakeReceptorBBS) GetAllTasksCallCount() int {
	fake.getAllTasksMutex.RLock()
	defer fake.getAllTasksMutex.RUnlock()
	return len(fake.getAllTasksArgsForCall)
}

func (fake *FakeReceptorBBS) GetAllTasksReturns(result1 []models.Task, result2 error) {
	fake.GetAllTasksStub = nil
	fake.getAllTasksReturns = struct {
		result1 []models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) GetAllTasksByDomain(domain string) ([]models.Task, error) {
	fake.getAllTasksByDomainMutex.Lock()
	fake.getAllTasksByDomainArgsForCall = append(fake.getAllTasksByDomainArgsForCall, struct {
		domain string
	}{domain})
	fake.getAllTasksByDomainMutex.Unlock()
	if fake.GetAllTasksByDomainStub != nil {
		return fake.GetAllTasksByDomainStub(domain)
	} else {
		return fake.getAllTasksByDomainReturns.result1, fake.getAllTasksByDomainReturns.result2
	}
}

func (fake *FakeReceptorBBS) GetAllTasksByDomainCallCount() int {
	fake.getAllTasksByDomainMutex.RLock()
	defer fake.getAllTasksByDomainMutex.RUnlock()
	return len(fake.getAllTasksByDomainArgsForCall)
}

func (fake *FakeReceptorBBS) GetAllTasksByDomainArgsForCall(i int) string {
	fake.getAllTasksByDomainMutex.RLock()
	defer fake.getAllTasksByDomainMutex.RUnlock()
	return fake.getAllTasksByDomainArgsForCall[i].domain
}

func (fake *FakeReceptorBBS) GetAllTasksByDomainReturns(result1 []models.Task, result2 error) {
	fake.GetAllTasksByDomainStub = nil
	fake.getAllTasksByDomainReturns = struct {
		result1 []models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) GetTaskByGuid(taskGuid string) (models.Task, error) {
	fake.getTaskByGuidMutex.Lock()
	fake.getTaskByGuidArgsForCall = append(fake.getTaskByGuidArgsForCall, struct {
		taskGuid string
	}{taskGuid})
	fake.getTaskByGuidMutex.Unlock()
	if fake.GetTaskByGuidStub != nil {
		return fake.GetTaskByGuidStub(taskGuid)
	} else {
		return fake.getTaskByGuidReturns.result1, fake.getTaskByGuidReturns.result2
	}
}

func (fake *FakeReceptorBBS) GetTaskByGuidCallCount() int {
	fake.getTaskByGuidMutex.RLock()
	defer fake.getTaskByGuidMutex.RUnlock()
	return len(fake.getTaskByGuidArgsForCall)
}

func (fake *FakeReceptorBBS) GetTaskByGuidArgsForCall(i int) string {
	fake.getTaskByGuidMutex.RLock()
	defer fake.getTaskByGuidMutex.RUnlock()
	return fake.getTaskByGuidArgsForCall[i].taskGuid
}

func (fake *FakeReceptorBBS) GetTaskByGuidReturns(result1 models.Task, result2 error) {
	fake.GetTaskByGuidStub = nil
	fake.getTaskByGuidReturns = struct {
		result1 models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeReceptorBBS) ResolvingTask(taskGuid string) error {
	fake.resolvingTaskMutex.Lock()
	fake.resolvingTaskArgsForCall = append(fake.resolvingTaskArgsForCall, struct {
		taskGuid string
	}{taskGuid})
	fake.resolvingTaskMutex.Unlock()
	if fake.ResolvingTaskStub != nil {
		return fake.ResolvingTaskStub(taskGuid)
	} else {
		return fake.resolvingTaskReturns.result1
	}
}

func (fake *FakeReceptorBBS) ResolvingTaskCallCount() int {
	fake.resolvingTaskMutex.RLock()
	defer fake.resolvingTaskMutex.RUnlock()
	return len(fake.resolvingTaskArgsForCall)
}

func (fake *FakeReceptorBBS) ResolvingTaskArgsForCall(i int) string {
	fake.resolvingTaskMutex.RLock()
	defer fake.resolvingTaskMutex.RUnlock()
	return fake.resolvingTaskArgsForCall[i].taskGuid
}

func (fake *FakeReceptorBBS) ResolvingTaskReturns(result1 error) {
	fake.ResolvingTaskStub = nil
	fake.resolvingTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) ResolveTask(taskGuid string) error {
	fake.resolveTaskMutex.Lock()
	fake.resolveTaskArgsForCall = append(fake.resolveTaskArgsForCall, struct {
		taskGuid string
	}{taskGuid})
	fake.resolveTaskMutex.Unlock()
	if fake.ResolveTaskStub != nil {
		return fake.ResolveTaskStub(taskGuid)
	} else {
		return fake.resolveTaskReturns.result1
	}
}

func (fake *FakeReceptorBBS) ResolveTaskCallCount() int {
	fake.resolveTaskMutex.RLock()
	defer fake.resolveTaskMutex.RUnlock()
	return len(fake.resolveTaskArgsForCall)
}

func (fake *FakeReceptorBBS) ResolveTaskArgsForCall(i int) string {
	fake.resolveTaskMutex.RLock()
	defer fake.resolveTaskMutex.RUnlock()
	return fake.resolveTaskArgsForCall[i].taskGuid
}

func (fake *FakeReceptorBBS) ResolveTaskReturns(result1 error) {
	fake.ResolveTaskStub = nil
	fake.resolveTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) WatchForCompletedTask() (<-chan models.Task, chan<- bool, <-chan error) {
	fake.watchForCompletedTaskMutex.Lock()
	fake.watchForCompletedTaskArgsForCall = append(fake.watchForCompletedTaskArgsForCall, struct{}{})
	fake.watchForCompletedTaskMutex.Unlock()
	if fake.WatchForCompletedTaskStub != nil {
		return fake.WatchForCompletedTaskStub()
	} else {
		return fake.watchForCompletedTaskReturns.result1, fake.watchForCompletedTaskReturns.result2, fake.watchForCompletedTaskReturns.result3
	}
}

func (fake *FakeReceptorBBS) WatchForCompletedTaskCallCount() int {
	fake.watchForCompletedTaskMutex.RLock()
	defer fake.watchForCompletedTaskMutex.RUnlock()
	return len(fake.watchForCompletedTaskArgsForCall)
}

func (fake *FakeReceptorBBS) WatchForCompletedTaskReturns(result1 <-chan models.Task, result2 chan<- bool, result3 <-chan error) {
	fake.WatchForCompletedTaskStub = nil
	fake.watchForCompletedTaskReturns = struct {
		result1 <-chan models.Task
		result2 chan<- bool
		result3 <-chan error
	}{result1, result2, result3}
}

func (fake *FakeReceptorBBS) DesireLRP(arg1 models.DesiredLRP) error {
	fake.desireLRPMutex.Lock()
	fake.desireLRPArgsForCall = append(fake.desireLRPArgsForCall, struct {
		arg1 models.DesiredLRP
	}{arg1})
	fake.desireLRPMutex.Unlock()
	if fake.DesireLRPStub != nil {
		return fake.DesireLRPStub(arg1)
	} else {
		return fake.desireLRPReturns.result1
	}
}

func (fake *FakeReceptorBBS) DesireLRPCallCount() int {
	fake.desireLRPMutex.RLock()
	defer fake.desireLRPMutex.RUnlock()
	return len(fake.desireLRPArgsForCall)
}

func (fake *FakeReceptorBBS) DesireLRPArgsForCall(i int) models.DesiredLRP {
	fake.desireLRPMutex.RLock()
	defer fake.desireLRPMutex.RUnlock()
	return fake.desireLRPArgsForCall[i].arg1
}

func (fake *FakeReceptorBBS) DesireLRPReturns(result1 error) {
	fake.DesireLRPStub = nil
	fake.desireLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) UpdateDesiredLRP(processGuid string, update models.DesiredLRPUpdate) error {
	fake.updateDesiredLRPMutex.Lock()
	fake.updateDesiredLRPArgsForCall = append(fake.updateDesiredLRPArgsForCall, struct {
		processGuid string
		update      models.DesiredLRPUpdate
	}{processGuid, update})
	fake.updateDesiredLRPMutex.Unlock()
	if fake.UpdateDesiredLRPStub != nil {
		return fake.UpdateDesiredLRPStub(processGuid, update)
	} else {
		return fake.updateDesiredLRPReturns.result1
	}
}

func (fake *FakeReceptorBBS) UpdateDesiredLRPCallCount() int {
	fake.updateDesiredLRPMutex.RLock()
	defer fake.updateDesiredLRPMutex.RUnlock()
	return len(fake.updateDesiredLRPArgsForCall)
}

func (fake *FakeReceptorBBS) UpdateDesiredLRPArgsForCall(i int) (string, models.DesiredLRPUpdate) {
	fake.updateDesiredLRPMutex.RLock()
	defer fake.updateDesiredLRPMutex.RUnlock()
	return fake.updateDesiredLRPArgsForCall[i].processGuid, fake.updateDesiredLRPArgsForCall[i].update
}

func (fake *FakeReceptorBBS) UpdateDesiredLRPReturns(result1 error) {
	fake.UpdateDesiredLRPStub = nil
	fake.updateDesiredLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) GetAllDesiredLRPs() ([]models.DesiredLRP, error) {
	fake.getAllDesiredLRPsMutex.Lock()
	fake.getAllDesiredLRPsArgsForCall = append(fake.getAllDesiredLRPsArgsForCall, struct{}{})
	fake.getAllDesiredLRPsMutex.Unlock()
	if fake.GetAllDesiredLRPsStub != nil {
		return fake.GetAllDesiredLRPsStub()
	} else {
		return fake.getAllDesiredLRPsReturns.result1, fake.getAllDesiredLRPsReturns.result2
	}
}

func (fake *FakeReceptorBBS) GetAllDesiredLRPsCallCount() int {
	fake.getAllDesiredLRPsMutex.RLock()
	defer fake.getAllDesiredLRPsMutex.RUnlock()
	return len(fake.getAllDesiredLRPsArgsForCall)
}

func (fake *FakeReceptorBBS) GetAllDesiredLRPsReturns(result1 []models.DesiredLRP, result2 error) {
	fake.GetAllDesiredLRPsStub = nil
	fake.getAllDesiredLRPsReturns = struct {
		result1 []models.DesiredLRP
		result2 error
	}{result1, result2}
}

var _ bbs.ReceptorBBS = new(FakeReceptorBBS)
