// This file was generated by counterfeiter
package fake_bbs

import (
	"sync"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
)

type FakeReceptorBBS struct {
	DesireTaskStub        func(models.Task) error
	desireTaskMutex       sync.RWMutex
	desireTaskArgsForCall []struct {
		arg1 models.Task
	}
	desireTaskReturns struct {
		result1 error
	}
	GetAllTasksStub        func() ([]models.Task, error)
	getAllTasksMutex       sync.RWMutex
	getAllTasksArgsForCall []struct{}
	getAllTasksReturns struct {
		result1 []models.Task
		result2 error
	}
}

func (fake *FakeReceptorBBS) DesireTask(arg1 models.Task) error {
	fake.desireTaskMutex.Lock()
	fake.desireTaskArgsForCall = append(fake.desireTaskArgsForCall, struct {
		arg1 models.Task
	}{arg1})
	fake.desireTaskMutex.Unlock()
	if fake.DesireTaskStub != nil {
		return fake.DesireTaskStub(arg1)
	} else {
		return fake.desireTaskReturns.result1
	}
}

func (fake *FakeReceptorBBS) DesireTaskCallCount() int {
	fake.desireTaskMutex.RLock()
	defer fake.desireTaskMutex.RUnlock()
	return len(fake.desireTaskArgsForCall)
}

func (fake *FakeReceptorBBS) DesireTaskArgsForCall(i int) models.Task {
	fake.desireTaskMutex.RLock()
	defer fake.desireTaskMutex.RUnlock()
	return fake.desireTaskArgsForCall[i].arg1
}

func (fake *FakeReceptorBBS) DesireTaskReturns(result1 error) {
	fake.DesireTaskStub = nil
	fake.desireTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReceptorBBS) GetAllTasks() ([]models.Task, error) {
	fake.getAllTasksMutex.Lock()
	fake.getAllTasksArgsForCall = append(fake.getAllTasksArgsForCall, struct{}{})
	fake.getAllTasksMutex.Unlock()
	if fake.GetAllTasksStub != nil {
		return fake.GetAllTasksStub()
	} else {
		return fake.getAllTasksReturns.result1, fake.getAllTasksReturns.result2
	}
}

func (fake *FakeReceptorBBS) GetAllTasksCallCount() int {
	fake.getAllTasksMutex.RLock()
	defer fake.getAllTasksMutex.RUnlock()
	return len(fake.getAllTasksArgsForCall)
}

func (fake *FakeReceptorBBS) GetAllTasksReturns(result1 []models.Task, result2 error) {
	fake.GetAllTasksStub = nil
	fake.getAllTasksReturns = struct {
		result1 []models.Task
		result2 error
	}{result1, result2}
}

var _ bbs.ReceptorBBS = new(FakeReceptorBBS)
