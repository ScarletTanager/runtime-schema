// This file was generated by counterfeiter
package fake_bbs

import (
	"sync"
	"time"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
	"github.com/pivotal-golang/lager"
	"github.com/tedsuo/ifrit"
)

type FakeRouteEmitterBBS struct {
	WatchForDesiredLRPChangesStub        func(lager.Logger) (<-chan models.DesiredLRP, <-chan models.DesiredLRP, <-chan error)
	watchForDesiredLRPChangesMutex       sync.RWMutex
	watchForDesiredLRPChangesArgsForCall []struct {
		arg1 lager.Logger
	}
	watchForDesiredLRPChangesReturns struct {
		result1 <-chan models.DesiredLRP
		result2 <-chan models.DesiredLRP
		result3 <-chan error
	}
	WatchForActualLRPChangesStub        func(lager.Logger) (<-chan models.ActualLRP, <-chan models.ActualLRP, <-chan error)
	watchForActualLRPChangesMutex       sync.RWMutex
	watchForActualLRPChangesArgsForCall []struct {
		arg1 lager.Logger
	}
	watchForActualLRPChangesReturns struct {
		result1 <-chan models.ActualLRP
		result2 <-chan models.ActualLRP
		result3 <-chan error
	}
	DesiredLRPsStub        func() ([]models.DesiredLRP, error)
	desiredLRPsMutex       sync.RWMutex
	desiredLRPsArgsForCall []struct{}
	desiredLRPsReturns struct {
		result1 []models.DesiredLRP
		result2 error
	}
	RunningActualLRPsStub        func() ([]models.ActualLRP, error)
	runningActualLRPsMutex       sync.RWMutex
	runningActualLRPsArgsForCall []struct{}
	runningActualLRPsReturns struct {
		result1 []models.ActualLRP
		result2 error
	}
	NewRouteEmitterLockStub        func(emitterID string, interval time.Duration) ifrit.Runner
	newRouteEmitterLockMutex       sync.RWMutex
	newRouteEmitterLockArgsForCall []struct {
		emitterID string
		interval  time.Duration
	}
	newRouteEmitterLockReturns struct {
		result1 ifrit.Runner
	}
}

func (fake *FakeRouteEmitterBBS) WatchForDesiredLRPChanges(arg1 lager.Logger) (<-chan models.DesiredLRP, <-chan models.DesiredLRP, <-chan error) {
	fake.watchForDesiredLRPChangesMutex.Lock()
	fake.watchForDesiredLRPChangesArgsForCall = append(fake.watchForDesiredLRPChangesArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.watchForDesiredLRPChangesMutex.Unlock()
	if fake.WatchForDesiredLRPChangesStub != nil {
		return fake.WatchForDesiredLRPChangesStub(arg1)
	} else {
		return fake.watchForDesiredLRPChangesReturns.result1, fake.watchForDesiredLRPChangesReturns.result2, fake.watchForDesiredLRPChangesReturns.result3
	}
}

func (fake *FakeRouteEmitterBBS) WatchForDesiredLRPChangesCallCount() int {
	fake.watchForDesiredLRPChangesMutex.RLock()
	defer fake.watchForDesiredLRPChangesMutex.RUnlock()
	return len(fake.watchForDesiredLRPChangesArgsForCall)
}

func (fake *FakeRouteEmitterBBS) WatchForDesiredLRPChangesArgsForCall(i int) lager.Logger {
	fake.watchForDesiredLRPChangesMutex.RLock()
	defer fake.watchForDesiredLRPChangesMutex.RUnlock()
	return fake.watchForDesiredLRPChangesArgsForCall[i].arg1
}

func (fake *FakeRouteEmitterBBS) WatchForDesiredLRPChangesReturns(result1 <-chan models.DesiredLRP, result2 <-chan models.DesiredLRP, result3 <-chan error) {
	fake.WatchForDesiredLRPChangesStub = nil
	fake.watchForDesiredLRPChangesReturns = struct {
		result1 <-chan models.DesiredLRP
		result2 <-chan models.DesiredLRP
		result3 <-chan error
	}{result1, result2, result3}
}

func (fake *FakeRouteEmitterBBS) WatchForActualLRPChanges(arg1 lager.Logger) (<-chan models.ActualLRP, <-chan models.ActualLRP, <-chan error) {
	fake.watchForActualLRPChangesMutex.Lock()
	fake.watchForActualLRPChangesArgsForCall = append(fake.watchForActualLRPChangesArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	fake.watchForActualLRPChangesMutex.Unlock()
	if fake.WatchForActualLRPChangesStub != nil {
		return fake.WatchForActualLRPChangesStub(arg1)
	} else {
		return fake.watchForActualLRPChangesReturns.result1, fake.watchForActualLRPChangesReturns.result2, fake.watchForActualLRPChangesReturns.result3
	}
}

func (fake *FakeRouteEmitterBBS) WatchForActualLRPChangesCallCount() int {
	fake.watchForActualLRPChangesMutex.RLock()
	defer fake.watchForActualLRPChangesMutex.RUnlock()
	return len(fake.watchForActualLRPChangesArgsForCall)
}

func (fake *FakeRouteEmitterBBS) WatchForActualLRPChangesArgsForCall(i int) lager.Logger {
	fake.watchForActualLRPChangesMutex.RLock()
	defer fake.watchForActualLRPChangesMutex.RUnlock()
	return fake.watchForActualLRPChangesArgsForCall[i].arg1
}

func (fake *FakeRouteEmitterBBS) WatchForActualLRPChangesReturns(result1 <-chan models.ActualLRP, result2 <-chan models.ActualLRP, result3 <-chan error) {
	fake.WatchForActualLRPChangesStub = nil
	fake.watchForActualLRPChangesReturns = struct {
		result1 <-chan models.ActualLRP
		result2 <-chan models.ActualLRP
		result3 <-chan error
	}{result1, result2, result3}
}

func (fake *FakeRouteEmitterBBS) DesiredLRPs() ([]models.DesiredLRP, error) {
	fake.desiredLRPsMutex.Lock()
	fake.desiredLRPsArgsForCall = append(fake.desiredLRPsArgsForCall, struct{}{})
	fake.desiredLRPsMutex.Unlock()
	if fake.DesiredLRPsStub != nil {
		return fake.DesiredLRPsStub()
	} else {
		return fake.desiredLRPsReturns.result1, fake.desiredLRPsReturns.result2
	}
}

func (fake *FakeRouteEmitterBBS) DesiredLRPsCallCount() int {
	fake.desiredLRPsMutex.RLock()
	defer fake.desiredLRPsMutex.RUnlock()
	return len(fake.desiredLRPsArgsForCall)
}

func (fake *FakeRouteEmitterBBS) DesiredLRPsReturns(result1 []models.DesiredLRP, result2 error) {
	fake.DesiredLRPsStub = nil
	fake.desiredLRPsReturns = struct {
		result1 []models.DesiredLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteEmitterBBS) RunningActualLRPs() ([]models.ActualLRP, error) {
	fake.runningActualLRPsMutex.Lock()
	fake.runningActualLRPsArgsForCall = append(fake.runningActualLRPsArgsForCall, struct{}{})
	fake.runningActualLRPsMutex.Unlock()
	if fake.RunningActualLRPsStub != nil {
		return fake.RunningActualLRPsStub()
	} else {
		return fake.runningActualLRPsReturns.result1, fake.runningActualLRPsReturns.result2
	}
}

func (fake *FakeRouteEmitterBBS) RunningActualLRPsCallCount() int {
	fake.runningActualLRPsMutex.RLock()
	defer fake.runningActualLRPsMutex.RUnlock()
	return len(fake.runningActualLRPsArgsForCall)
}

func (fake *FakeRouteEmitterBBS) RunningActualLRPsReturns(result1 []models.ActualLRP, result2 error) {
	fake.RunningActualLRPsStub = nil
	fake.runningActualLRPsReturns = struct {
		result1 []models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeRouteEmitterBBS) NewRouteEmitterLock(emitterID string, interval time.Duration) ifrit.Runner {
	fake.newRouteEmitterLockMutex.Lock()
	fake.newRouteEmitterLockArgsForCall = append(fake.newRouteEmitterLockArgsForCall, struct {
		emitterID string
		interval  time.Duration
	}{emitterID, interval})
	fake.newRouteEmitterLockMutex.Unlock()
	if fake.NewRouteEmitterLockStub != nil {
		return fake.NewRouteEmitterLockStub(emitterID, interval)
	} else {
		return fake.newRouteEmitterLockReturns.result1
	}
}

func (fake *FakeRouteEmitterBBS) NewRouteEmitterLockCallCount() int {
	fake.newRouteEmitterLockMutex.RLock()
	defer fake.newRouteEmitterLockMutex.RUnlock()
	return len(fake.newRouteEmitterLockArgsForCall)
}

func (fake *FakeRouteEmitterBBS) NewRouteEmitterLockArgsForCall(i int) (string, time.Duration) {
	fake.newRouteEmitterLockMutex.RLock()
	defer fake.newRouteEmitterLockMutex.RUnlock()
	return fake.newRouteEmitterLockArgsForCall[i].emitterID, fake.newRouteEmitterLockArgsForCall[i].interval
}

func (fake *FakeRouteEmitterBBS) NewRouteEmitterLockReturns(result1 ifrit.Runner) {
	fake.NewRouteEmitterLockStub = nil
	fake.newRouteEmitterLockReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

var _ bbs.RouteEmitterBBS = new(FakeRouteEmitterBBS)
