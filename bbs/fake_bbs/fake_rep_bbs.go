// This file was generated by counterfeiter
package fake_bbs

import (
	"sync"
	"time"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
	"github.com/tedsuo/ifrit"
)

type FakeRepBBS struct {
	NewCellPresenceStub        func(cellPresence models.CellPresence, retryInterval time.Duration) ifrit.Runner
	newCellPresenceMutex       sync.RWMutex
	newCellPresenceArgsForCall []struct {
		cellPresence  models.CellPresence
		retryInterval time.Duration
	}
	newCellPresenceReturns struct {
		result1 ifrit.Runner
	}
}

func (fake *FakeRepBBS) NewCellPresence(cellPresence models.CellPresence, retryInterval time.Duration) ifrit.Runner {
	fake.newCellPresenceMutex.Lock()
	fake.newCellPresenceArgsForCall = append(fake.newCellPresenceArgsForCall, struct {
		cellPresence  models.CellPresence
		retryInterval time.Duration
	}{cellPresence, retryInterval})
	fake.newCellPresenceMutex.Unlock()
	if fake.NewCellPresenceStub != nil {
		return fake.NewCellPresenceStub(cellPresence, retryInterval)
	} else {
		return fake.newCellPresenceReturns.result1
	}
}

func (fake *FakeRepBBS) NewCellPresenceCallCount() int {
	fake.newCellPresenceMutex.RLock()
	defer fake.newCellPresenceMutex.RUnlock()
	return len(fake.newCellPresenceArgsForCall)
}

func (fake *FakeRepBBS) NewCellPresenceArgsForCall(i int) (models.CellPresence, time.Duration) {
	fake.newCellPresenceMutex.RLock()
	defer fake.newCellPresenceMutex.RUnlock()
	return fake.newCellPresenceArgsForCall[i].cellPresence, fake.newCellPresenceArgsForCall[i].retryInterval
}

func (fake *FakeRepBBS) NewCellPresenceReturns(result1 ifrit.Runner) {
	fake.NewCellPresenceStub = nil
	fake.newCellPresenceReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

var _ bbs.RepBBS = new(FakeRepBBS)
