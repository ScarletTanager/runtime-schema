// This file was generated by counterfeiter
package fake_bbs

import (
	"sync"
	"time"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
	"github.com/pivotal-golang/lager"
	"github.com/tedsuo/ifrit"
)

type FakeRepBBS struct {
	NewCellHeartbeatStub        func(cellPresence models.CellPresence, interval time.Duration) ifrit.Runner
	newCellHeartbeatMutex       sync.RWMutex
	newCellHeartbeatArgsForCall []struct {
		cellPresence models.CellPresence
		interval     time.Duration
	}
	newCellHeartbeatReturns struct {
		result1 ifrit.Runner
	}
	StartTaskStub        func(taskGuid string, cellID string) error
	startTaskMutex       sync.RWMutex
	startTaskArgsForCall []struct {
		taskGuid string
		cellID   string
	}
	startTaskReturns struct {
		result1 error
	}
	TaskByGuidStub        func(taskGuid string) (*models.Task, error)
	taskByGuidMutex       sync.RWMutex
	taskByGuidArgsForCall []struct {
		taskGuid string
	}
	taskByGuidReturns struct {
		result1 *models.Task
		result2 error
	}
	TasksByCellIDStub        func(cellID string) ([]models.Task, error)
	tasksByCellIDMutex       sync.RWMutex
	tasksByCellIDArgsForCall []struct {
		cellID string
	}
	tasksByCellIDReturns struct {
		result1 []models.Task
		result2 error
	}
	CompleteTaskStub        func(taskGuid string, cellID string, failed bool, failureReason string, result string) error
	completeTaskMutex       sync.RWMutex
	completeTaskArgsForCall []struct {
		taskGuid      string
		cellID        string
		failed        bool
		failureReason string
		result        string
	}
	completeTaskReturns struct {
		result1 error
	}
	ActualLRPsByCellIDStub        func(cellID string) ([]models.ActualLRP, error)
	actualLRPsByCellIDMutex       sync.RWMutex
	actualLRPsByCellIDArgsForCall []struct {
		cellID string
	}
	actualLRPsByCellIDReturns struct {
		result1 []models.ActualLRP
		result2 error
	}
	ClaimActualLRPStub        func(models.ActualLRPKey, models.ActualLRPContainerKey, lager.Logger) error
	claimActualLRPMutex       sync.RWMutex
	claimActualLRPArgsForCall []struct {
		arg1 models.ActualLRPKey
		arg2 models.ActualLRPContainerKey
		arg3 lager.Logger
	}
	claimActualLRPReturns struct {
		result1 error
	}
	StartActualLRPStub        func(models.ActualLRPKey, models.ActualLRPContainerKey, models.ActualLRPNetInfo, lager.Logger) error
	startActualLRPMutex       sync.RWMutex
	startActualLRPArgsForCall []struct {
		arg1 models.ActualLRPKey
		arg2 models.ActualLRPContainerKey
		arg3 models.ActualLRPNetInfo
		arg4 lager.Logger
	}
	startActualLRPReturns struct {
		result1 error
	}
	RemoveActualLRPStub        func(models.ActualLRPKey, models.ActualLRPContainerKey, lager.Logger) error
	removeActualLRPMutex       sync.RWMutex
	removeActualLRPArgsForCall []struct {
		arg1 models.ActualLRPKey
		arg2 models.ActualLRPContainerKey
		arg3 lager.Logger
	}
	removeActualLRPReturns struct {
		result1 error
	}
}

func (fake *FakeRepBBS) NewCellHeartbeat(cellPresence models.CellPresence, interval time.Duration) ifrit.Runner {
	fake.newCellHeartbeatMutex.Lock()
	fake.newCellHeartbeatArgsForCall = append(fake.newCellHeartbeatArgsForCall, struct {
		cellPresence models.CellPresence
		interval     time.Duration
	}{cellPresence, interval})
	fake.newCellHeartbeatMutex.Unlock()
	if fake.NewCellHeartbeatStub != nil {
		return fake.NewCellHeartbeatStub(cellPresence, interval)
	} else {
		return fake.newCellHeartbeatReturns.result1
	}
}

func (fake *FakeRepBBS) NewCellHeartbeatCallCount() int {
	fake.newCellHeartbeatMutex.RLock()
	defer fake.newCellHeartbeatMutex.RUnlock()
	return len(fake.newCellHeartbeatArgsForCall)
}

func (fake *FakeRepBBS) NewCellHeartbeatArgsForCall(i int) (models.CellPresence, time.Duration) {
	fake.newCellHeartbeatMutex.RLock()
	defer fake.newCellHeartbeatMutex.RUnlock()
	return fake.newCellHeartbeatArgsForCall[i].cellPresence, fake.newCellHeartbeatArgsForCall[i].interval
}

func (fake *FakeRepBBS) NewCellHeartbeatReturns(result1 ifrit.Runner) {
	fake.NewCellHeartbeatStub = nil
	fake.newCellHeartbeatReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

func (fake *FakeRepBBS) StartTask(taskGuid string, cellID string) error {
	fake.startTaskMutex.Lock()
	fake.startTaskArgsForCall = append(fake.startTaskArgsForCall, struct {
		taskGuid string
		cellID   string
	}{taskGuid, cellID})
	fake.startTaskMutex.Unlock()
	if fake.StartTaskStub != nil {
		return fake.StartTaskStub(taskGuid, cellID)
	} else {
		return fake.startTaskReturns.result1
	}
}

func (fake *FakeRepBBS) StartTaskCallCount() int {
	fake.startTaskMutex.RLock()
	defer fake.startTaskMutex.RUnlock()
	return len(fake.startTaskArgsForCall)
}

func (fake *FakeRepBBS) StartTaskArgsForCall(i int) (string, string) {
	fake.startTaskMutex.RLock()
	defer fake.startTaskMutex.RUnlock()
	return fake.startTaskArgsForCall[i].taskGuid, fake.startTaskArgsForCall[i].cellID
}

func (fake *FakeRepBBS) StartTaskReturns(result1 error) {
	fake.StartTaskStub = nil
	fake.startTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepBBS) TaskByGuid(taskGuid string) (*models.Task, error) {
	fake.taskByGuidMutex.Lock()
	fake.taskByGuidArgsForCall = append(fake.taskByGuidArgsForCall, struct {
		taskGuid string
	}{taskGuid})
	fake.taskByGuidMutex.Unlock()
	if fake.TaskByGuidStub != nil {
		return fake.TaskByGuidStub(taskGuid)
	} else {
		return fake.taskByGuidReturns.result1, fake.taskByGuidReturns.result2
	}
}

func (fake *FakeRepBBS) TaskByGuidCallCount() int {
	fake.taskByGuidMutex.RLock()
	defer fake.taskByGuidMutex.RUnlock()
	return len(fake.taskByGuidArgsForCall)
}

func (fake *FakeRepBBS) TaskByGuidArgsForCall(i int) string {
	fake.taskByGuidMutex.RLock()
	defer fake.taskByGuidMutex.RUnlock()
	return fake.taskByGuidArgsForCall[i].taskGuid
}

func (fake *FakeRepBBS) TaskByGuidReturns(result1 *models.Task, result2 error) {
	fake.TaskByGuidStub = nil
	fake.taskByGuidReturns = struct {
		result1 *models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeRepBBS) TasksByCellID(cellID string) ([]models.Task, error) {
	fake.tasksByCellIDMutex.Lock()
	fake.tasksByCellIDArgsForCall = append(fake.tasksByCellIDArgsForCall, struct {
		cellID string
	}{cellID})
	fake.tasksByCellIDMutex.Unlock()
	if fake.TasksByCellIDStub != nil {
		return fake.TasksByCellIDStub(cellID)
	} else {
		return fake.tasksByCellIDReturns.result1, fake.tasksByCellIDReturns.result2
	}
}

func (fake *FakeRepBBS) TasksByCellIDCallCount() int {
	fake.tasksByCellIDMutex.RLock()
	defer fake.tasksByCellIDMutex.RUnlock()
	return len(fake.tasksByCellIDArgsForCall)
}

func (fake *FakeRepBBS) TasksByCellIDArgsForCall(i int) string {
	fake.tasksByCellIDMutex.RLock()
	defer fake.tasksByCellIDMutex.RUnlock()
	return fake.tasksByCellIDArgsForCall[i].cellID
}

func (fake *FakeRepBBS) TasksByCellIDReturns(result1 []models.Task, result2 error) {
	fake.TasksByCellIDStub = nil
	fake.tasksByCellIDReturns = struct {
		result1 []models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeRepBBS) CompleteTask(taskGuid string, cellID string, failed bool, failureReason string, result string) error {
	fake.completeTaskMutex.Lock()
	fake.completeTaskArgsForCall = append(fake.completeTaskArgsForCall, struct {
		taskGuid      string
		cellID        string
		failed        bool
		failureReason string
		result        string
	}{taskGuid, cellID, failed, failureReason, result})
	fake.completeTaskMutex.Unlock()
	if fake.CompleteTaskStub != nil {
		return fake.CompleteTaskStub(taskGuid, cellID, failed, failureReason, result)
	} else {
		return fake.completeTaskReturns.result1
	}
}

func (fake *FakeRepBBS) CompleteTaskCallCount() int {
	fake.completeTaskMutex.RLock()
	defer fake.completeTaskMutex.RUnlock()
	return len(fake.completeTaskArgsForCall)
}

func (fake *FakeRepBBS) CompleteTaskArgsForCall(i int) (string, string, bool, string, string) {
	fake.completeTaskMutex.RLock()
	defer fake.completeTaskMutex.RUnlock()
	return fake.completeTaskArgsForCall[i].taskGuid, fake.completeTaskArgsForCall[i].cellID, fake.completeTaskArgsForCall[i].failed, fake.completeTaskArgsForCall[i].failureReason, fake.completeTaskArgsForCall[i].result
}

func (fake *FakeRepBBS) CompleteTaskReturns(result1 error) {
	fake.CompleteTaskStub = nil
	fake.completeTaskReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepBBS) ActualLRPsByCellID(cellID string) ([]models.ActualLRP, error) {
	fake.actualLRPsByCellIDMutex.Lock()
	fake.actualLRPsByCellIDArgsForCall = append(fake.actualLRPsByCellIDArgsForCall, struct {
		cellID string
	}{cellID})
	fake.actualLRPsByCellIDMutex.Unlock()
	if fake.ActualLRPsByCellIDStub != nil {
		return fake.ActualLRPsByCellIDStub(cellID)
	} else {
		return fake.actualLRPsByCellIDReturns.result1, fake.actualLRPsByCellIDReturns.result2
	}
}

func (fake *FakeRepBBS) ActualLRPsByCellIDCallCount() int {
	fake.actualLRPsByCellIDMutex.RLock()
	defer fake.actualLRPsByCellIDMutex.RUnlock()
	return len(fake.actualLRPsByCellIDArgsForCall)
}

func (fake *FakeRepBBS) ActualLRPsByCellIDArgsForCall(i int) string {
	fake.actualLRPsByCellIDMutex.RLock()
	defer fake.actualLRPsByCellIDMutex.RUnlock()
	return fake.actualLRPsByCellIDArgsForCall[i].cellID
}

func (fake *FakeRepBBS) ActualLRPsByCellIDReturns(result1 []models.ActualLRP, result2 error) {
	fake.ActualLRPsByCellIDStub = nil
	fake.actualLRPsByCellIDReturns = struct {
		result1 []models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeRepBBS) ClaimActualLRP(arg1 models.ActualLRPKey, arg2 models.ActualLRPContainerKey, arg3 lager.Logger) error {
	fake.claimActualLRPMutex.Lock()
	fake.claimActualLRPArgsForCall = append(fake.claimActualLRPArgsForCall, struct {
		arg1 models.ActualLRPKey
		arg2 models.ActualLRPContainerKey
		arg3 lager.Logger
	}{arg1, arg2, arg3})
	fake.claimActualLRPMutex.Unlock()
	if fake.ClaimActualLRPStub != nil {
		return fake.ClaimActualLRPStub(arg1, arg2, arg3)
	} else {
		return fake.claimActualLRPReturns.result1
	}
}

func (fake *FakeRepBBS) ClaimActualLRPCallCount() int {
	fake.claimActualLRPMutex.RLock()
	defer fake.claimActualLRPMutex.RUnlock()
	return len(fake.claimActualLRPArgsForCall)
}

func (fake *FakeRepBBS) ClaimActualLRPArgsForCall(i int) (models.ActualLRPKey, models.ActualLRPContainerKey, lager.Logger) {
	fake.claimActualLRPMutex.RLock()
	defer fake.claimActualLRPMutex.RUnlock()
	return fake.claimActualLRPArgsForCall[i].arg1, fake.claimActualLRPArgsForCall[i].arg2, fake.claimActualLRPArgsForCall[i].arg3
}

func (fake *FakeRepBBS) ClaimActualLRPReturns(result1 error) {
	fake.ClaimActualLRPStub = nil
	fake.claimActualLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepBBS) StartActualLRP(arg1 models.ActualLRPKey, arg2 models.ActualLRPContainerKey, arg3 models.ActualLRPNetInfo, arg4 lager.Logger) error {
	fake.startActualLRPMutex.Lock()
	fake.startActualLRPArgsForCall = append(fake.startActualLRPArgsForCall, struct {
		arg1 models.ActualLRPKey
		arg2 models.ActualLRPContainerKey
		arg3 models.ActualLRPNetInfo
		arg4 lager.Logger
	}{arg1, arg2, arg3, arg4})
	fake.startActualLRPMutex.Unlock()
	if fake.StartActualLRPStub != nil {
		return fake.StartActualLRPStub(arg1, arg2, arg3, arg4)
	} else {
		return fake.startActualLRPReturns.result1
	}
}

func (fake *FakeRepBBS) StartActualLRPCallCount() int {
	fake.startActualLRPMutex.RLock()
	defer fake.startActualLRPMutex.RUnlock()
	return len(fake.startActualLRPArgsForCall)
}

func (fake *FakeRepBBS) StartActualLRPArgsForCall(i int) (models.ActualLRPKey, models.ActualLRPContainerKey, models.ActualLRPNetInfo, lager.Logger) {
	fake.startActualLRPMutex.RLock()
	defer fake.startActualLRPMutex.RUnlock()
	return fake.startActualLRPArgsForCall[i].arg1, fake.startActualLRPArgsForCall[i].arg2, fake.startActualLRPArgsForCall[i].arg3, fake.startActualLRPArgsForCall[i].arg4
}

func (fake *FakeRepBBS) StartActualLRPReturns(result1 error) {
	fake.StartActualLRPStub = nil
	fake.startActualLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRepBBS) RemoveActualLRP(arg1 models.ActualLRPKey, arg2 models.ActualLRPContainerKey, arg3 lager.Logger) error {
	fake.removeActualLRPMutex.Lock()
	fake.removeActualLRPArgsForCall = append(fake.removeActualLRPArgsForCall, struct {
		arg1 models.ActualLRPKey
		arg2 models.ActualLRPContainerKey
		arg3 lager.Logger
	}{arg1, arg2, arg3})
	fake.removeActualLRPMutex.Unlock()
	if fake.RemoveActualLRPStub != nil {
		return fake.RemoveActualLRPStub(arg1, arg2, arg3)
	} else {
		return fake.removeActualLRPReturns.result1
	}
}

func (fake *FakeRepBBS) RemoveActualLRPCallCount() int {
	fake.removeActualLRPMutex.RLock()
	defer fake.removeActualLRPMutex.RUnlock()
	return len(fake.removeActualLRPArgsForCall)
}

func (fake *FakeRepBBS) RemoveActualLRPArgsForCall(i int) (models.ActualLRPKey, models.ActualLRPContainerKey, lager.Logger) {
	fake.removeActualLRPMutex.RLock()
	defer fake.removeActualLRPMutex.RUnlock()
	return fake.removeActualLRPArgsForCall[i].arg1, fake.removeActualLRPArgsForCall[i].arg2, fake.removeActualLRPArgsForCall[i].arg3
}

func (fake *FakeRepBBS) RemoveActualLRPReturns(result1 error) {
	fake.RemoveActualLRPStub = nil
	fake.removeActualLRPReturns = struct {
		result1 error
	}{result1}
}

var _ bbs.RepBBS = new(FakeRepBBS)
