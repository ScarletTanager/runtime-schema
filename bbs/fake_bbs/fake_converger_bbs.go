// This file was generated by counterfeiter
package fake_bbs

import (
	"sync"
	"time"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs"
	"github.com/cloudfoundry-incubator/runtime-schema/bbs/services_bbs"
	"github.com/pivotal-golang/lager"
	"github.com/tedsuo/ifrit"
)

type FakeConvergerBBS struct {
	NewConvergeLockStub        func(convergerID string, ttl, retryInterval time.Duration) ifrit.Runner
	newConvergeLockMutex       sync.RWMutex
	newConvergeLockArgsForCall []struct {
		convergerID   string
		ttl           time.Duration
		retryInterval time.Duration
	}
	newConvergeLockReturns struct {
		result1 ifrit.Runner
	}
	ConvergeLRPsStub        func(logger lager.Logger, cellsLoader *services_bbs.CellsLoader)
	convergeLRPsMutex       sync.RWMutex
	convergeLRPsArgsForCall []struct {
		logger      lager.Logger
		cellsLoader *services_bbs.CellsLoader
	}
	ConvergeTasksStub        func(logger lager.Logger, timeToClaim, convergenceInterval, timeToResolve time.Duration, cellsLoader *services_bbs.CellsLoader)
	convergeTasksMutex       sync.RWMutex
	convergeTasksArgsForCall []struct {
		logger              lager.Logger
		timeToClaim         time.Duration
		convergenceInterval time.Duration
		timeToResolve       time.Duration
		cellsLoader         *services_bbs.CellsLoader
	}
	WaitForCellEventStub        func() (services_bbs.CellEvent, error)
	waitForCellEventMutex       sync.RWMutex
	waitForCellEventArgsForCall []struct{}
	waitForCellEventReturns struct {
		result1 services_bbs.CellEvent
		result2 error
	}
}

func (fake *FakeConvergerBBS) NewConvergeLock(convergerID string, ttl time.Duration, retryInterval time.Duration) ifrit.Runner {
	fake.newConvergeLockMutex.Lock()
	fake.newConvergeLockArgsForCall = append(fake.newConvergeLockArgsForCall, struct {
		convergerID   string
		ttl           time.Duration
		retryInterval time.Duration
	}{convergerID, ttl, retryInterval})
	fake.newConvergeLockMutex.Unlock()
	if fake.NewConvergeLockStub != nil {
		return fake.NewConvergeLockStub(convergerID, ttl, retryInterval)
	} else {
		return fake.newConvergeLockReturns.result1
	}
}

func (fake *FakeConvergerBBS) NewConvergeLockCallCount() int {
	fake.newConvergeLockMutex.RLock()
	defer fake.newConvergeLockMutex.RUnlock()
	return len(fake.newConvergeLockArgsForCall)
}

func (fake *FakeConvergerBBS) NewConvergeLockArgsForCall(i int) (string, time.Duration, time.Duration) {
	fake.newConvergeLockMutex.RLock()
	defer fake.newConvergeLockMutex.RUnlock()
	return fake.newConvergeLockArgsForCall[i].convergerID, fake.newConvergeLockArgsForCall[i].ttl, fake.newConvergeLockArgsForCall[i].retryInterval
}

func (fake *FakeConvergerBBS) NewConvergeLockReturns(result1 ifrit.Runner) {
	fake.NewConvergeLockStub = nil
	fake.newConvergeLockReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

func (fake *FakeConvergerBBS) ConvergeLRPs(logger lager.Logger, cellsLoader *services_bbs.CellsLoader) {
	fake.convergeLRPsMutex.Lock()
	fake.convergeLRPsArgsForCall = append(fake.convergeLRPsArgsForCall, struct {
		logger      lager.Logger
		cellsLoader *services_bbs.CellsLoader
	}{logger, cellsLoader})
	fake.convergeLRPsMutex.Unlock()
	if fake.ConvergeLRPsStub != nil {
		fake.ConvergeLRPsStub(logger, cellsLoader)
	}
}

func (fake *FakeConvergerBBS) ConvergeLRPsCallCount() int {
	fake.convergeLRPsMutex.RLock()
	defer fake.convergeLRPsMutex.RUnlock()
	return len(fake.convergeLRPsArgsForCall)
}

func (fake *FakeConvergerBBS) ConvergeLRPsArgsForCall(i int) (lager.Logger, *services_bbs.CellsLoader) {
	fake.convergeLRPsMutex.RLock()
	defer fake.convergeLRPsMutex.RUnlock()
	return fake.convergeLRPsArgsForCall[i].logger, fake.convergeLRPsArgsForCall[i].cellsLoader
}

func (fake *FakeConvergerBBS) ConvergeTasks(logger lager.Logger, timeToClaim time.Duration, convergenceInterval time.Duration, timeToResolve time.Duration, cellsLoader *services_bbs.CellsLoader) {
	fake.convergeTasksMutex.Lock()
	fake.convergeTasksArgsForCall = append(fake.convergeTasksArgsForCall, struct {
		logger              lager.Logger
		timeToClaim         time.Duration
		convergenceInterval time.Duration
		timeToResolve       time.Duration
		cellsLoader         *services_bbs.CellsLoader
	}{logger, timeToClaim, convergenceInterval, timeToResolve, cellsLoader})
	fake.convergeTasksMutex.Unlock()
	if fake.ConvergeTasksStub != nil {
		fake.ConvergeTasksStub(logger, timeToClaim, convergenceInterval, timeToResolve, cellsLoader)
	}
}

func (fake *FakeConvergerBBS) ConvergeTasksCallCount() int {
	fake.convergeTasksMutex.RLock()
	defer fake.convergeTasksMutex.RUnlock()
	return len(fake.convergeTasksArgsForCall)
}

func (fake *FakeConvergerBBS) ConvergeTasksArgsForCall(i int) (lager.Logger, time.Duration, time.Duration, time.Duration, *services_bbs.CellsLoader) {
	fake.convergeTasksMutex.RLock()
	defer fake.convergeTasksMutex.RUnlock()
	return fake.convergeTasksArgsForCall[i].logger, fake.convergeTasksArgsForCall[i].timeToClaim, fake.convergeTasksArgsForCall[i].convergenceInterval, fake.convergeTasksArgsForCall[i].timeToResolve, fake.convergeTasksArgsForCall[i].cellsLoader
}

func (fake *FakeConvergerBBS) WaitForCellEvent() (services_bbs.CellEvent, error) {
	fake.waitForCellEventMutex.Lock()
	fake.waitForCellEventArgsForCall = append(fake.waitForCellEventArgsForCall, struct{}{})
	fake.waitForCellEventMutex.Unlock()
	if fake.WaitForCellEventStub != nil {
		return fake.WaitForCellEventStub()
	} else {
		return fake.waitForCellEventReturns.result1, fake.waitForCellEventReturns.result2
	}
}

func (fake *FakeConvergerBBS) WaitForCellEventCallCount() int {
	fake.waitForCellEventMutex.RLock()
	defer fake.waitForCellEventMutex.RUnlock()
	return len(fake.waitForCellEventArgsForCall)
}

func (fake *FakeConvergerBBS) WaitForCellEventReturns(result1 services_bbs.CellEvent, result2 error) {
	fake.WaitForCellEventStub = nil
	fake.waitForCellEventReturns = struct {
		result1 services_bbs.CellEvent
		result2 error
	}{result1, result2}
}

var _ bbs.ConvergerBBS = new(FakeConvergerBBS)
