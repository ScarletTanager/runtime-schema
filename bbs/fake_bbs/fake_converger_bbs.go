// This file was generated by counterfeiter
package fake_bbs

import (
	"sync"
	"time"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
	"github.com/tedsuo/ifrit"
)

type FakeConvergerBBS struct {
	ConvergeLRPsStub        func(time.Duration)
	convergeLRPsMutex       sync.RWMutex
	convergeLRPsArgsForCall []struct {
		arg1 time.Duration
	}
	ActualLRPsByProcessGuidStub        func(string) ([]models.ActualLRP, error)
	actualLRPsByProcessGuidMutex       sync.RWMutex
	actualLRPsByProcessGuidArgsForCall []struct {
		arg1 string
	}
	actualLRPsByProcessGuidReturns struct {
		result1 []models.ActualLRP
		result2 error
	}
	RequestStopLRPInstancesStub        func([]models.ActualLRP) error
	requestStopLRPInstancesMutex       sync.RWMutex
	requestStopLRPInstancesArgsForCall []struct {
		arg1 []models.ActualLRP
	}
	requestStopLRPInstancesReturns struct {
		result1 error
	}
	WatchForDesiredLRPChangesStub        func() (<-chan models.DesiredLRPChange, chan<- bool, <-chan error)
	watchForDesiredLRPChangesMutex       sync.RWMutex
	watchForDesiredLRPChangesArgsForCall []struct{}
	watchForDesiredLRPChangesReturns struct {
		result1 <-chan models.DesiredLRPChange
		result2 chan<- bool
		result3 <-chan error
	}
	CreateActualLRPStub        func(models.ActualLRP) (*models.ActualLRP, error)
	createActualLRPMutex       sync.RWMutex
	createActualLRPArgsForCall []struct {
		arg1 models.ActualLRP
	}
	createActualLRPReturns struct {
		result1 *models.ActualLRP
		result2 error
	}
	RemoveActualLRPStub        func(lrp models.ActualLRP) error
	removeActualLRPMutex       sync.RWMutex
	removeActualLRPArgsForCall []struct {
		lrp models.ActualLRP
	}
	removeActualLRPReturns struct {
		result1 error
	}
	ConvergeLRPStartAuctionsStub        func(kickPendingDuration time.Duration, expireClaimedDuration time.Duration)
	convergeLRPStartAuctionsMutex       sync.RWMutex
	convergeLRPStartAuctionsArgsForCall []struct {
		kickPendingDuration   time.Duration
		expireClaimedDuration time.Duration
	}
	RequestLRPStartAuctionStub        func(models.LRPStartAuction) error
	requestLRPStartAuctionMutex       sync.RWMutex
	requestLRPStartAuctionArgsForCall []struct {
		arg1 models.LRPStartAuction
	}
	requestLRPStartAuctionReturns struct {
		result1 error
	}
	ConvergeTaskStub        func(timeToClaim, convergenceInterval, timeToResolve time.Duration)
	convergeTaskMutex       sync.RWMutex
	convergeTaskArgsForCall []struct {
		timeToClaim         time.Duration
		convergenceInterval time.Duration
		timeToResolve       time.Duration
	}
	NewConvergeLockStub        func(convergerID string, interval time.Duration) ifrit.Runner
	newConvergeLockMutex       sync.RWMutex
	newConvergeLockArgsForCall []struct {
		convergerID string
		interval    time.Duration
	}
	newConvergeLockReturns struct {
		result1 ifrit.Runner
	}
}

func (fake *FakeConvergerBBS) ConvergeLRPs(arg1 time.Duration) {
	fake.convergeLRPsMutex.Lock()
	fake.convergeLRPsArgsForCall = append(fake.convergeLRPsArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	fake.convergeLRPsMutex.Unlock()
	if fake.ConvergeLRPsStub != nil {
		fake.ConvergeLRPsStub(arg1)
	}
}

func (fake *FakeConvergerBBS) ConvergeLRPsCallCount() int {
	fake.convergeLRPsMutex.RLock()
	defer fake.convergeLRPsMutex.RUnlock()
	return len(fake.convergeLRPsArgsForCall)
}

func (fake *FakeConvergerBBS) ConvergeLRPsArgsForCall(i int) time.Duration {
	fake.convergeLRPsMutex.RLock()
	defer fake.convergeLRPsMutex.RUnlock()
	return fake.convergeLRPsArgsForCall[i].arg1
}

func (fake *FakeConvergerBBS) ActualLRPsByProcessGuid(arg1 string) ([]models.ActualLRP, error) {
	fake.actualLRPsByProcessGuidMutex.Lock()
	fake.actualLRPsByProcessGuidArgsForCall = append(fake.actualLRPsByProcessGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.actualLRPsByProcessGuidMutex.Unlock()
	if fake.ActualLRPsByProcessGuidStub != nil {
		return fake.ActualLRPsByProcessGuidStub(arg1)
	} else {
		return fake.actualLRPsByProcessGuidReturns.result1, fake.actualLRPsByProcessGuidReturns.result2
	}
}

func (fake *FakeConvergerBBS) ActualLRPsByProcessGuidCallCount() int {
	fake.actualLRPsByProcessGuidMutex.RLock()
	defer fake.actualLRPsByProcessGuidMutex.RUnlock()
	return len(fake.actualLRPsByProcessGuidArgsForCall)
}

func (fake *FakeConvergerBBS) ActualLRPsByProcessGuidArgsForCall(i int) string {
	fake.actualLRPsByProcessGuidMutex.RLock()
	defer fake.actualLRPsByProcessGuidMutex.RUnlock()
	return fake.actualLRPsByProcessGuidArgsForCall[i].arg1
}

func (fake *FakeConvergerBBS) ActualLRPsByProcessGuidReturns(result1 []models.ActualLRP, result2 error) {
	fake.ActualLRPsByProcessGuidStub = nil
	fake.actualLRPsByProcessGuidReturns = struct {
		result1 []models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeConvergerBBS) RequestStopLRPInstances(arg1 []models.ActualLRP) error {
	fake.requestStopLRPInstancesMutex.Lock()
	fake.requestStopLRPInstancesArgsForCall = append(fake.requestStopLRPInstancesArgsForCall, struct {
		arg1 []models.ActualLRP
	}{arg1})
	fake.requestStopLRPInstancesMutex.Unlock()
	if fake.RequestStopLRPInstancesStub != nil {
		return fake.RequestStopLRPInstancesStub(arg1)
	} else {
		return fake.requestStopLRPInstancesReturns.result1
	}
}

func (fake *FakeConvergerBBS) RequestStopLRPInstancesCallCount() int {
	fake.requestStopLRPInstancesMutex.RLock()
	defer fake.requestStopLRPInstancesMutex.RUnlock()
	return len(fake.requestStopLRPInstancesArgsForCall)
}

func (fake *FakeConvergerBBS) RequestStopLRPInstancesArgsForCall(i int) []models.ActualLRP {
	fake.requestStopLRPInstancesMutex.RLock()
	defer fake.requestStopLRPInstancesMutex.RUnlock()
	return fake.requestStopLRPInstancesArgsForCall[i].arg1
}

func (fake *FakeConvergerBBS) RequestStopLRPInstancesReturns(result1 error) {
	fake.RequestStopLRPInstancesStub = nil
	fake.requestStopLRPInstancesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConvergerBBS) WatchForDesiredLRPChanges() (<-chan models.DesiredLRPChange, chan<- bool, <-chan error) {
	fake.watchForDesiredLRPChangesMutex.Lock()
	fake.watchForDesiredLRPChangesArgsForCall = append(fake.watchForDesiredLRPChangesArgsForCall, struct{}{})
	fake.watchForDesiredLRPChangesMutex.Unlock()
	if fake.WatchForDesiredLRPChangesStub != nil {
		return fake.WatchForDesiredLRPChangesStub()
	} else {
		return fake.watchForDesiredLRPChangesReturns.result1, fake.watchForDesiredLRPChangesReturns.result2, fake.watchForDesiredLRPChangesReturns.result3
	}
}

func (fake *FakeConvergerBBS) WatchForDesiredLRPChangesCallCount() int {
	fake.watchForDesiredLRPChangesMutex.RLock()
	defer fake.watchForDesiredLRPChangesMutex.RUnlock()
	return len(fake.watchForDesiredLRPChangesArgsForCall)
}

func (fake *FakeConvergerBBS) WatchForDesiredLRPChangesReturns(result1 <-chan models.DesiredLRPChange, result2 chan<- bool, result3 <-chan error) {
	fake.WatchForDesiredLRPChangesStub = nil
	fake.watchForDesiredLRPChangesReturns = struct {
		result1 <-chan models.DesiredLRPChange
		result2 chan<- bool
		result3 <-chan error
	}{result1, result2, result3}
}

func (fake *FakeConvergerBBS) CreateActualLRP(arg1 models.ActualLRP) (*models.ActualLRP, error) {
	fake.createActualLRPMutex.Lock()
	fake.createActualLRPArgsForCall = append(fake.createActualLRPArgsForCall, struct {
		arg1 models.ActualLRP
	}{arg1})
	fake.createActualLRPMutex.Unlock()
	if fake.CreateActualLRPStub != nil {
		return fake.CreateActualLRPStub(arg1)
	} else {
		return fake.createActualLRPReturns.result1, fake.createActualLRPReturns.result2
	}
}

func (fake *FakeConvergerBBS) CreateActualLRPCallCount() int {
	fake.createActualLRPMutex.RLock()
	defer fake.createActualLRPMutex.RUnlock()
	return len(fake.createActualLRPArgsForCall)
}

func (fake *FakeConvergerBBS) CreateActualLRPArgsForCall(i int) models.ActualLRP {
	fake.createActualLRPMutex.RLock()
	defer fake.createActualLRPMutex.RUnlock()
	return fake.createActualLRPArgsForCall[i].arg1
}

func (fake *FakeConvergerBBS) CreateActualLRPReturns(result1 *models.ActualLRP, result2 error) {
	fake.CreateActualLRPStub = nil
	fake.createActualLRPReturns = struct {
		result1 *models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeConvergerBBS) RemoveActualLRP(lrp models.ActualLRP) error {
	fake.removeActualLRPMutex.Lock()
	fake.removeActualLRPArgsForCall = append(fake.removeActualLRPArgsForCall, struct {
		lrp models.ActualLRP
	}{lrp})
	fake.removeActualLRPMutex.Unlock()
	if fake.RemoveActualLRPStub != nil {
		return fake.RemoveActualLRPStub(lrp)
	} else {
		return fake.removeActualLRPReturns.result1
	}
}

func (fake *FakeConvergerBBS) RemoveActualLRPCallCount() int {
	fake.removeActualLRPMutex.RLock()
	defer fake.removeActualLRPMutex.RUnlock()
	return len(fake.removeActualLRPArgsForCall)
}

func (fake *FakeConvergerBBS) RemoveActualLRPArgsForCall(i int) models.ActualLRP {
	fake.removeActualLRPMutex.RLock()
	defer fake.removeActualLRPMutex.RUnlock()
	return fake.removeActualLRPArgsForCall[i].lrp
}

func (fake *FakeConvergerBBS) RemoveActualLRPReturns(result1 error) {
	fake.RemoveActualLRPStub = nil
	fake.removeActualLRPReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConvergerBBS) ConvergeLRPStartAuctions(kickPendingDuration time.Duration, expireClaimedDuration time.Duration) {
	fake.convergeLRPStartAuctionsMutex.Lock()
	fake.convergeLRPStartAuctionsArgsForCall = append(fake.convergeLRPStartAuctionsArgsForCall, struct {
		kickPendingDuration   time.Duration
		expireClaimedDuration time.Duration
	}{kickPendingDuration, expireClaimedDuration})
	fake.convergeLRPStartAuctionsMutex.Unlock()
	if fake.ConvergeLRPStartAuctionsStub != nil {
		fake.ConvergeLRPStartAuctionsStub(kickPendingDuration, expireClaimedDuration)
	}
}

func (fake *FakeConvergerBBS) ConvergeLRPStartAuctionsCallCount() int {
	fake.convergeLRPStartAuctionsMutex.RLock()
	defer fake.convergeLRPStartAuctionsMutex.RUnlock()
	return len(fake.convergeLRPStartAuctionsArgsForCall)
}

func (fake *FakeConvergerBBS) ConvergeLRPStartAuctionsArgsForCall(i int) (time.Duration, time.Duration) {
	fake.convergeLRPStartAuctionsMutex.RLock()
	defer fake.convergeLRPStartAuctionsMutex.RUnlock()
	return fake.convergeLRPStartAuctionsArgsForCall[i].kickPendingDuration, fake.convergeLRPStartAuctionsArgsForCall[i].expireClaimedDuration
}

func (fake *FakeConvergerBBS) RequestLRPStartAuction(arg1 models.LRPStartAuction) error {
	fake.requestLRPStartAuctionMutex.Lock()
	fake.requestLRPStartAuctionArgsForCall = append(fake.requestLRPStartAuctionArgsForCall, struct {
		arg1 models.LRPStartAuction
	}{arg1})
	fake.requestLRPStartAuctionMutex.Unlock()
	if fake.RequestLRPStartAuctionStub != nil {
		return fake.RequestLRPStartAuctionStub(arg1)
	} else {
		return fake.requestLRPStartAuctionReturns.result1
	}
}

func (fake *FakeConvergerBBS) RequestLRPStartAuctionCallCount() int {
	fake.requestLRPStartAuctionMutex.RLock()
	defer fake.requestLRPStartAuctionMutex.RUnlock()
	return len(fake.requestLRPStartAuctionArgsForCall)
}

func (fake *FakeConvergerBBS) RequestLRPStartAuctionArgsForCall(i int) models.LRPStartAuction {
	fake.requestLRPStartAuctionMutex.RLock()
	defer fake.requestLRPStartAuctionMutex.RUnlock()
	return fake.requestLRPStartAuctionArgsForCall[i].arg1
}

func (fake *FakeConvergerBBS) RequestLRPStartAuctionReturns(result1 error) {
	fake.RequestLRPStartAuctionStub = nil
	fake.requestLRPStartAuctionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConvergerBBS) ConvergeTask(timeToClaim time.Duration, convergenceInterval time.Duration, timeToResolve time.Duration) {
	fake.convergeTaskMutex.Lock()
	fake.convergeTaskArgsForCall = append(fake.convergeTaskArgsForCall, struct {
		timeToClaim         time.Duration
		convergenceInterval time.Duration
		timeToResolve       time.Duration
	}{timeToClaim, convergenceInterval, timeToResolve})
	fake.convergeTaskMutex.Unlock()
	if fake.ConvergeTaskStub != nil {
		fake.ConvergeTaskStub(timeToClaim, convergenceInterval, timeToResolve)
	}
}

func (fake *FakeConvergerBBS) ConvergeTaskCallCount() int {
	fake.convergeTaskMutex.RLock()
	defer fake.convergeTaskMutex.RUnlock()
	return len(fake.convergeTaskArgsForCall)
}

func (fake *FakeConvergerBBS) ConvergeTaskArgsForCall(i int) (time.Duration, time.Duration, time.Duration) {
	fake.convergeTaskMutex.RLock()
	defer fake.convergeTaskMutex.RUnlock()
	return fake.convergeTaskArgsForCall[i].timeToClaim, fake.convergeTaskArgsForCall[i].convergenceInterval, fake.convergeTaskArgsForCall[i].timeToResolve
}

func (fake *FakeConvergerBBS) NewConvergeLock(convergerID string, interval time.Duration) ifrit.Runner {
	fake.newConvergeLockMutex.Lock()
	fake.newConvergeLockArgsForCall = append(fake.newConvergeLockArgsForCall, struct {
		convergerID string
		interval    time.Duration
	}{convergerID, interval})
	fake.newConvergeLockMutex.Unlock()
	if fake.NewConvergeLockStub != nil {
		return fake.NewConvergeLockStub(convergerID, interval)
	} else {
		return fake.newConvergeLockReturns.result1
	}
}

func (fake *FakeConvergerBBS) NewConvergeLockCallCount() int {
	fake.newConvergeLockMutex.RLock()
	defer fake.newConvergeLockMutex.RUnlock()
	return len(fake.newConvergeLockArgsForCall)
}

func (fake *FakeConvergerBBS) NewConvergeLockArgsForCall(i int) (string, time.Duration) {
	fake.newConvergeLockMutex.RLock()
	defer fake.newConvergeLockMutex.RUnlock()
	return fake.newConvergeLockArgsForCall[i].convergerID, fake.newConvergeLockArgsForCall[i].interval
}

func (fake *FakeConvergerBBS) NewConvergeLockReturns(result1 ifrit.Runner) {
	fake.NewConvergeLockStub = nil
	fake.newConvergeLockReturns = struct {
		result1 ifrit.Runner
	}{result1}
}

var _ bbs.ConvergerBBS = new(FakeConvergerBBS)
