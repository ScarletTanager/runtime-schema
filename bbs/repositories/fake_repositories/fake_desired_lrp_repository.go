// This file was generated by counterfeiter
package fake_repositories

import (
	"sync"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs/repositories"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
	"github.com/go-gorp/gorp"
)

type FakeDesiredLRPRepository struct {
	CreateStub        func(sql gorp.SqlExecutor, modelDesired models.DesiredLRP) (models.DesiredLRP, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		sql          gorp.SqlExecutor
		modelDesired models.DesiredLRP
	}
	createReturns struct {
		result1 models.DesiredLRP
		result2 error
	}
	GetAllStub        func(sql gorp.SqlExecutor) ([]models.DesiredLRP, error)
	getAllMutex       sync.RWMutex
	getAllArgsForCall []struct {
		sql gorp.SqlExecutor
	}
	getAllReturns struct {
		result1 []models.DesiredLRP
		result2 error
	}
	GetByProcessGuidStub        func(sql gorp.SqlExecutor, guid string) (models.DesiredLRP, int64, error)
	getByProcessGuidMutex       sync.RWMutex
	getByProcessGuidArgsForCall []struct {
		sql  gorp.SqlExecutor
		guid string
	}
	getByProcessGuidReturns struct {
		result1 models.DesiredLRP
		result2 int64
		result3 error
	}
	GetAllByDomainStub        func(sql gorp.SqlExecutor, domain string) ([]models.DesiredLRP, error)
	getAllByDomainMutex       sync.RWMutex
	getAllByDomainArgsForCall []struct {
		sql    gorp.SqlExecutor
		domain string
	}
	getAllByDomainReturns struct {
		result1 []models.DesiredLRP
		result2 error
	}
	DeleteByProcessGuidStub        func(sql gorp.SqlExecutor, guid string) error
	deleteByProcessGuidMutex       sync.RWMutex
	deleteByProcessGuidArgsForCall []struct {
		sql  gorp.SqlExecutor
		guid string
	}
	deleteByProcessGuidReturns struct {
		result1 error
	}
	UpdateDesiredLRPStub        func(sql gorp.SqlExecutor, guid string, updateRequest models.DesiredLRPUpdate) (models.DesiredLRP, error)
	updateDesiredLRPMutex       sync.RWMutex
	updateDesiredLRPArgsForCall []struct {
		sql           gorp.SqlExecutor
		guid          string
		updateRequest models.DesiredLRPUpdate
	}
	updateDesiredLRPReturns struct {
		result1 models.DesiredLRP
		result2 error
	}
}

func (fake *FakeDesiredLRPRepository) Create(sql gorp.SqlExecutor, modelDesired models.DesiredLRP) (models.DesiredLRP, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		sql          gorp.SqlExecutor
		modelDesired models.DesiredLRP
	}{sql, modelDesired})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(sql, modelDesired)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeDesiredLRPRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeDesiredLRPRepository) CreateArgsForCall(i int) (gorp.SqlExecutor, models.DesiredLRP) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].sql, fake.createArgsForCall[i].modelDesired
}

func (fake *FakeDesiredLRPRepository) CreateReturns(result1 models.DesiredLRP, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 models.DesiredLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeDesiredLRPRepository) GetAll(sql gorp.SqlExecutor) ([]models.DesiredLRP, error) {
	fake.getAllMutex.Lock()
	fake.getAllArgsForCall = append(fake.getAllArgsForCall, struct {
		sql gorp.SqlExecutor
	}{sql})
	fake.getAllMutex.Unlock()
	if fake.GetAllStub != nil {
		return fake.GetAllStub(sql)
	} else {
		return fake.getAllReturns.result1, fake.getAllReturns.result2
	}
}

func (fake *FakeDesiredLRPRepository) GetAllCallCount() int {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	return len(fake.getAllArgsForCall)
}

func (fake *FakeDesiredLRPRepository) GetAllArgsForCall(i int) gorp.SqlExecutor {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	return fake.getAllArgsForCall[i].sql
}

func (fake *FakeDesiredLRPRepository) GetAllReturns(result1 []models.DesiredLRP, result2 error) {
	fake.GetAllStub = nil
	fake.getAllReturns = struct {
		result1 []models.DesiredLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeDesiredLRPRepository) GetByProcessGuid(sql gorp.SqlExecutor, guid string) (models.DesiredLRP, int64, error) {
	fake.getByProcessGuidMutex.Lock()
	fake.getByProcessGuidArgsForCall = append(fake.getByProcessGuidArgsForCall, struct {
		sql  gorp.SqlExecutor
		guid string
	}{sql, guid})
	fake.getByProcessGuidMutex.Unlock()
	if fake.GetByProcessGuidStub != nil {
		return fake.GetByProcessGuidStub(sql, guid)
	} else {
		return fake.getByProcessGuidReturns.result1, fake.getByProcessGuidReturns.result2, fake.getByProcessGuidReturns.result3
	}
}

func (fake *FakeDesiredLRPRepository) GetByProcessGuidCallCount() int {
	fake.getByProcessGuidMutex.RLock()
	defer fake.getByProcessGuidMutex.RUnlock()
	return len(fake.getByProcessGuidArgsForCall)
}

func (fake *FakeDesiredLRPRepository) GetByProcessGuidArgsForCall(i int) (gorp.SqlExecutor, string) {
	fake.getByProcessGuidMutex.RLock()
	defer fake.getByProcessGuidMutex.RUnlock()
	return fake.getByProcessGuidArgsForCall[i].sql, fake.getByProcessGuidArgsForCall[i].guid
}

func (fake *FakeDesiredLRPRepository) GetByProcessGuidReturns(result1 models.DesiredLRP, result2 int64, result3 error) {
	fake.GetByProcessGuidStub = nil
	fake.getByProcessGuidReturns = struct {
		result1 models.DesiredLRP
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeDesiredLRPRepository) GetAllByDomain(sql gorp.SqlExecutor, domain string) ([]models.DesiredLRP, error) {
	fake.getAllByDomainMutex.Lock()
	fake.getAllByDomainArgsForCall = append(fake.getAllByDomainArgsForCall, struct {
		sql    gorp.SqlExecutor
		domain string
	}{sql, domain})
	fake.getAllByDomainMutex.Unlock()
	if fake.GetAllByDomainStub != nil {
		return fake.GetAllByDomainStub(sql, domain)
	} else {
		return fake.getAllByDomainReturns.result1, fake.getAllByDomainReturns.result2
	}
}

func (fake *FakeDesiredLRPRepository) GetAllByDomainCallCount() int {
	fake.getAllByDomainMutex.RLock()
	defer fake.getAllByDomainMutex.RUnlock()
	return len(fake.getAllByDomainArgsForCall)
}

func (fake *FakeDesiredLRPRepository) GetAllByDomainArgsForCall(i int) (gorp.SqlExecutor, string) {
	fake.getAllByDomainMutex.RLock()
	defer fake.getAllByDomainMutex.RUnlock()
	return fake.getAllByDomainArgsForCall[i].sql, fake.getAllByDomainArgsForCall[i].domain
}

func (fake *FakeDesiredLRPRepository) GetAllByDomainReturns(result1 []models.DesiredLRP, result2 error) {
	fake.GetAllByDomainStub = nil
	fake.getAllByDomainReturns = struct {
		result1 []models.DesiredLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeDesiredLRPRepository) DeleteByProcessGuid(sql gorp.SqlExecutor, guid string) error {
	fake.deleteByProcessGuidMutex.Lock()
	fake.deleteByProcessGuidArgsForCall = append(fake.deleteByProcessGuidArgsForCall, struct {
		sql  gorp.SqlExecutor
		guid string
	}{sql, guid})
	fake.deleteByProcessGuidMutex.Unlock()
	if fake.DeleteByProcessGuidStub != nil {
		return fake.DeleteByProcessGuidStub(sql, guid)
	} else {
		return fake.deleteByProcessGuidReturns.result1
	}
}

func (fake *FakeDesiredLRPRepository) DeleteByProcessGuidCallCount() int {
	fake.deleteByProcessGuidMutex.RLock()
	defer fake.deleteByProcessGuidMutex.RUnlock()
	return len(fake.deleteByProcessGuidArgsForCall)
}

func (fake *FakeDesiredLRPRepository) DeleteByProcessGuidArgsForCall(i int) (gorp.SqlExecutor, string) {
	fake.deleteByProcessGuidMutex.RLock()
	defer fake.deleteByProcessGuidMutex.RUnlock()
	return fake.deleteByProcessGuidArgsForCall[i].sql, fake.deleteByProcessGuidArgsForCall[i].guid
}

func (fake *FakeDesiredLRPRepository) DeleteByProcessGuidReturns(result1 error) {
	fake.DeleteByProcessGuidStub = nil
	fake.deleteByProcessGuidReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDesiredLRPRepository) UpdateDesiredLRP(sql gorp.SqlExecutor, guid string, updateRequest models.DesiredLRPUpdate) (models.DesiredLRP, error) {
	fake.updateDesiredLRPMutex.Lock()
	fake.updateDesiredLRPArgsForCall = append(fake.updateDesiredLRPArgsForCall, struct {
		sql           gorp.SqlExecutor
		guid          string
		updateRequest models.DesiredLRPUpdate
	}{sql, guid, updateRequest})
	fake.updateDesiredLRPMutex.Unlock()
	if fake.UpdateDesiredLRPStub != nil {
		return fake.UpdateDesiredLRPStub(sql, guid, updateRequest)
	} else {
		return fake.updateDesiredLRPReturns.result1, fake.updateDesiredLRPReturns.result2
	}
}

func (fake *FakeDesiredLRPRepository) UpdateDesiredLRPCallCount() int {
	fake.updateDesiredLRPMutex.RLock()
	defer fake.updateDesiredLRPMutex.RUnlock()
	return len(fake.updateDesiredLRPArgsForCall)
}

func (fake *FakeDesiredLRPRepository) UpdateDesiredLRPArgsForCall(i int) (gorp.SqlExecutor, string, models.DesiredLRPUpdate) {
	fake.updateDesiredLRPMutex.RLock()
	defer fake.updateDesiredLRPMutex.RUnlock()
	return fake.updateDesiredLRPArgsForCall[i].sql, fake.updateDesiredLRPArgsForCall[i].guid, fake.updateDesiredLRPArgsForCall[i].updateRequest
}

func (fake *FakeDesiredLRPRepository) UpdateDesiredLRPReturns(result1 models.DesiredLRP, result2 error) {
	fake.UpdateDesiredLRPStub = nil
	fake.updateDesiredLRPReturns = struct {
		result1 models.DesiredLRP
		result2 error
	}{result1, result2}
}

var _ repositories.DesiredLRPRepository = new(FakeDesiredLRPRepository)
