// This file was generated by counterfeiter
package fake_repositories

import (
	"sync"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs/repositories"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
	"github.com/go-gorp/gorp"
)

type FakeActualLRPRepository struct {
	CreateStub        func(sql gorp.SqlExecutor, modelActual models.ActualLRP) (models.ActualLRP, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		sql         gorp.SqlExecutor
		modelActual models.ActualLRP
	}
	createReturns struct {
		result1 models.ActualLRP
		result2 error
	}
	GetByProcessGuidStub        func(sql gorp.SqlExecutor, guid string) (models.ActualLRP, int64, error)
	getByProcessGuidMutex       sync.RWMutex
	getByProcessGuidArgsForCall []struct {
		sql  gorp.SqlExecutor
		guid string
	}
	getByProcessGuidReturns struct {
		result1 models.ActualLRP
		result2 int64
		result3 error
	}
}

func (fake *FakeActualLRPRepository) Create(sql gorp.SqlExecutor, modelActual models.ActualLRP) (models.ActualLRP, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		sql         gorp.SqlExecutor
		modelActual models.ActualLRP
	}{sql, modelActual})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(sql, modelActual)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeActualLRPRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeActualLRPRepository) CreateArgsForCall(i int) (gorp.SqlExecutor, models.ActualLRP) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].sql, fake.createArgsForCall[i].modelActual
}

func (fake *FakeActualLRPRepository) CreateReturns(result1 models.ActualLRP, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 models.ActualLRP
		result2 error
	}{result1, result2}
}

func (fake *FakeActualLRPRepository) GetByProcessGuid(sql gorp.SqlExecutor, guid string) (models.ActualLRP, int64, error) {
	fake.getByProcessGuidMutex.Lock()
	fake.getByProcessGuidArgsForCall = append(fake.getByProcessGuidArgsForCall, struct {
		sql  gorp.SqlExecutor
		guid string
	}{sql, guid})
	fake.getByProcessGuidMutex.Unlock()
	if fake.GetByProcessGuidStub != nil {
		return fake.GetByProcessGuidStub(sql, guid)
	} else {
		return fake.getByProcessGuidReturns.result1, fake.getByProcessGuidReturns.result2, fake.getByProcessGuidReturns.result3
	}
}

func (fake *FakeActualLRPRepository) GetByProcessGuidCallCount() int {
	fake.getByProcessGuidMutex.RLock()
	defer fake.getByProcessGuidMutex.RUnlock()
	return len(fake.getByProcessGuidArgsForCall)
}

func (fake *FakeActualLRPRepository) GetByProcessGuidArgsForCall(i int) (gorp.SqlExecutor, string) {
	fake.getByProcessGuidMutex.RLock()
	defer fake.getByProcessGuidMutex.RUnlock()
	return fake.getByProcessGuidArgsForCall[i].sql, fake.getByProcessGuidArgsForCall[i].guid
}

func (fake *FakeActualLRPRepository) GetByProcessGuidReturns(result1 models.ActualLRP, result2 int64, result3 error) {
	fake.GetByProcessGuidStub = nil
	fake.getByProcessGuidReturns = struct {
		result1 models.ActualLRP
		result2 int64
		result3 error
	}{result1, result2, result3}
}

var _ repositories.ActualLRPRepository = new(FakeActualLRPRepository)
