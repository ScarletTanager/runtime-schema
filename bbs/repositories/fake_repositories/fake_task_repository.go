// This file was generated by counterfeiter
package fake_repositories

import (
	"sync"

	"github.com/cloudfoundry-incubator/runtime-schema/bbs/repositories"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
	"github.com/go-gorp/gorp"
)

type FakeTaskRepository struct {
	CreateStub        func(sql gorp.SqlExecutor, modelTask models.Task) (models.Task, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		sql       gorp.SqlExecutor
		modelTask models.Task
	}
	createReturns struct {
		result1 models.Task
		result2 error
	}
	GetAllStub        func(sql gorp.SqlExecutor) ([]models.Task, error)
	getAllMutex       sync.RWMutex
	getAllArgsForCall []struct {
		sql gorp.SqlExecutor
	}
	getAllReturns struct {
		result1 []models.Task
		result2 error
	}
	GetAllWithIndexStub        func(sql gorp.SqlExecutor) ([]repositories.TaskWithIndex, error)
	getAllWithIndexMutex       sync.RWMutex
	getAllWithIndexArgsForCall []struct {
		sql gorp.SqlExecutor
	}
	getAllWithIndexReturns struct {
		result1 []repositories.TaskWithIndex
		result2 error
	}
	GetByTaskGuidStub        func(sql gorp.SqlExecutor, guid string) (models.Task, int64, error)
	getByTaskGuidMutex       sync.RWMutex
	getByTaskGuidArgsForCall []struct {
		sql  gorp.SqlExecutor
		guid string
	}
	getByTaskGuidReturns struct {
		result1 models.Task
		result2 int64
		result3 error
	}
	GetAllByDomainStub        func(sql gorp.SqlExecutor, domain string) ([]models.Task, error)
	getAllByDomainMutex       sync.RWMutex
	getAllByDomainArgsForCall []struct {
		sql    gorp.SqlExecutor
		domain string
	}
	getAllByDomainReturns struct {
		result1 []models.Task
		result2 error
	}
	DeleteByTaskGuidStub        func(sql gorp.SqlExecutor, guid string) error
	deleteByTaskGuidMutex       sync.RWMutex
	deleteByTaskGuidArgsForCall []struct {
		sql  gorp.SqlExecutor
		guid string
	}
	deleteByTaskGuidReturns struct {
		result1 error
	}
	CompareAndSwapByIndexStub        func(sql gorp.SqlExecutor, modelTask models.Task, index int64) (models.Task, error)
	compareAndSwapByIndexMutex       sync.RWMutex
	compareAndSwapByIndexArgsForCall []struct {
		sql       gorp.SqlExecutor
		modelTask models.Task
		index     int64
	}
	compareAndSwapByIndexReturns struct {
		result1 models.Task
		result2 error
	}
}

func (fake *FakeTaskRepository) Create(sql gorp.SqlExecutor, modelTask models.Task) (models.Task, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		sql       gorp.SqlExecutor
		modelTask models.Task
	}{sql, modelTask})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(sql, modelTask)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeTaskRepository) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeTaskRepository) CreateArgsForCall(i int) (gorp.SqlExecutor, models.Task) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].sql, fake.createArgsForCall[i].modelTask
}

func (fake *FakeTaskRepository) CreateReturns(result1 models.Task, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskRepository) GetAll(sql gorp.SqlExecutor) ([]models.Task, error) {
	fake.getAllMutex.Lock()
	fake.getAllArgsForCall = append(fake.getAllArgsForCall, struct {
		sql gorp.SqlExecutor
	}{sql})
	fake.getAllMutex.Unlock()
	if fake.GetAllStub != nil {
		return fake.GetAllStub(sql)
	} else {
		return fake.getAllReturns.result1, fake.getAllReturns.result2
	}
}

func (fake *FakeTaskRepository) GetAllCallCount() int {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	return len(fake.getAllArgsForCall)
}

func (fake *FakeTaskRepository) GetAllArgsForCall(i int) gorp.SqlExecutor {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	return fake.getAllArgsForCall[i].sql
}

func (fake *FakeTaskRepository) GetAllReturns(result1 []models.Task, result2 error) {
	fake.GetAllStub = nil
	fake.getAllReturns = struct {
		result1 []models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskRepository) GetAllWithIndex(sql gorp.SqlExecutor) ([]repositories.TaskWithIndex, error) {
	fake.getAllWithIndexMutex.Lock()
	fake.getAllWithIndexArgsForCall = append(fake.getAllWithIndexArgsForCall, struct {
		sql gorp.SqlExecutor
	}{sql})
	fake.getAllWithIndexMutex.Unlock()
	if fake.GetAllWithIndexStub != nil {
		return fake.GetAllWithIndexStub(sql)
	} else {
		return fake.getAllWithIndexReturns.result1, fake.getAllWithIndexReturns.result2
	}
}

func (fake *FakeTaskRepository) GetAllWithIndexCallCount() int {
	fake.getAllWithIndexMutex.RLock()
	defer fake.getAllWithIndexMutex.RUnlock()
	return len(fake.getAllWithIndexArgsForCall)
}

func (fake *FakeTaskRepository) GetAllWithIndexArgsForCall(i int) gorp.SqlExecutor {
	fake.getAllWithIndexMutex.RLock()
	defer fake.getAllWithIndexMutex.RUnlock()
	return fake.getAllWithIndexArgsForCall[i].sql
}

func (fake *FakeTaskRepository) GetAllWithIndexReturns(result1 []repositories.TaskWithIndex, result2 error) {
	fake.GetAllWithIndexStub = nil
	fake.getAllWithIndexReturns = struct {
		result1 []repositories.TaskWithIndex
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskRepository) GetByTaskGuid(sql gorp.SqlExecutor, guid string) (models.Task, int64, error) {
	fake.getByTaskGuidMutex.Lock()
	fake.getByTaskGuidArgsForCall = append(fake.getByTaskGuidArgsForCall, struct {
		sql  gorp.SqlExecutor
		guid string
	}{sql, guid})
	fake.getByTaskGuidMutex.Unlock()
	if fake.GetByTaskGuidStub != nil {
		return fake.GetByTaskGuidStub(sql, guid)
	} else {
		return fake.getByTaskGuidReturns.result1, fake.getByTaskGuidReturns.result2, fake.getByTaskGuidReturns.result3
	}
}

func (fake *FakeTaskRepository) GetByTaskGuidCallCount() int {
	fake.getByTaskGuidMutex.RLock()
	defer fake.getByTaskGuidMutex.RUnlock()
	return len(fake.getByTaskGuidArgsForCall)
}

func (fake *FakeTaskRepository) GetByTaskGuidArgsForCall(i int) (gorp.SqlExecutor, string) {
	fake.getByTaskGuidMutex.RLock()
	defer fake.getByTaskGuidMutex.RUnlock()
	return fake.getByTaskGuidArgsForCall[i].sql, fake.getByTaskGuidArgsForCall[i].guid
}

func (fake *FakeTaskRepository) GetByTaskGuidReturns(result1 models.Task, result2 int64, result3 error) {
	fake.GetByTaskGuidStub = nil
	fake.getByTaskGuidReturns = struct {
		result1 models.Task
		result2 int64
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeTaskRepository) GetAllByDomain(sql gorp.SqlExecutor, domain string) ([]models.Task, error) {
	fake.getAllByDomainMutex.Lock()
	fake.getAllByDomainArgsForCall = append(fake.getAllByDomainArgsForCall, struct {
		sql    gorp.SqlExecutor
		domain string
	}{sql, domain})
	fake.getAllByDomainMutex.Unlock()
	if fake.GetAllByDomainStub != nil {
		return fake.GetAllByDomainStub(sql, domain)
	} else {
		return fake.getAllByDomainReturns.result1, fake.getAllByDomainReturns.result2
	}
}

func (fake *FakeTaskRepository) GetAllByDomainCallCount() int {
	fake.getAllByDomainMutex.RLock()
	defer fake.getAllByDomainMutex.RUnlock()
	return len(fake.getAllByDomainArgsForCall)
}

func (fake *FakeTaskRepository) GetAllByDomainArgsForCall(i int) (gorp.SqlExecutor, string) {
	fake.getAllByDomainMutex.RLock()
	defer fake.getAllByDomainMutex.RUnlock()
	return fake.getAllByDomainArgsForCall[i].sql, fake.getAllByDomainArgsForCall[i].domain
}

func (fake *FakeTaskRepository) GetAllByDomainReturns(result1 []models.Task, result2 error) {
	fake.GetAllByDomainStub = nil
	fake.getAllByDomainReturns = struct {
		result1 []models.Task
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskRepository) DeleteByTaskGuid(sql gorp.SqlExecutor, guid string) error {
	fake.deleteByTaskGuidMutex.Lock()
	fake.deleteByTaskGuidArgsForCall = append(fake.deleteByTaskGuidArgsForCall, struct {
		sql  gorp.SqlExecutor
		guid string
	}{sql, guid})
	fake.deleteByTaskGuidMutex.Unlock()
	if fake.DeleteByTaskGuidStub != nil {
		return fake.DeleteByTaskGuidStub(sql, guid)
	} else {
		return fake.deleteByTaskGuidReturns.result1
	}
}

func (fake *FakeTaskRepository) DeleteByTaskGuidCallCount() int {
	fake.deleteByTaskGuidMutex.RLock()
	defer fake.deleteByTaskGuidMutex.RUnlock()
	return len(fake.deleteByTaskGuidArgsForCall)
}

func (fake *FakeTaskRepository) DeleteByTaskGuidArgsForCall(i int) (gorp.SqlExecutor, string) {
	fake.deleteByTaskGuidMutex.RLock()
	defer fake.deleteByTaskGuidMutex.RUnlock()
	return fake.deleteByTaskGuidArgsForCall[i].sql, fake.deleteByTaskGuidArgsForCall[i].guid
}

func (fake *FakeTaskRepository) DeleteByTaskGuidReturns(result1 error) {
	fake.DeleteByTaskGuidStub = nil
	fake.deleteByTaskGuidReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTaskRepository) CompareAndSwapByIndex(sql gorp.SqlExecutor, modelTask models.Task, index int64) (models.Task, error) {
	fake.compareAndSwapByIndexMutex.Lock()
	fake.compareAndSwapByIndexArgsForCall = append(fake.compareAndSwapByIndexArgsForCall, struct {
		sql       gorp.SqlExecutor
		modelTask models.Task
		index     int64
	}{sql, modelTask, index})
	fake.compareAndSwapByIndexMutex.Unlock()
	if fake.CompareAndSwapByIndexStub != nil {
		return fake.CompareAndSwapByIndexStub(sql, modelTask, index)
	} else {
		return fake.compareAndSwapByIndexReturns.result1, fake.compareAndSwapByIndexReturns.result2
	}
}

func (fake *FakeTaskRepository) CompareAndSwapByIndexCallCount() int {
	fake.compareAndSwapByIndexMutex.RLock()
	defer fake.compareAndSwapByIndexMutex.RUnlock()
	return len(fake.compareAndSwapByIndexArgsForCall)
}

func (fake *FakeTaskRepository) CompareAndSwapByIndexArgsForCall(i int) (gorp.SqlExecutor, models.Task, int64) {
	fake.compareAndSwapByIndexMutex.RLock()
	defer fake.compareAndSwapByIndexMutex.RUnlock()
	return fake.compareAndSwapByIndexArgsForCall[i].sql, fake.compareAndSwapByIndexArgsForCall[i].modelTask, fake.compareAndSwapByIndexArgsForCall[i].index
}

func (fake *FakeTaskRepository) CompareAndSwapByIndexReturns(result1 models.Task, result2 error) {
	fake.CompareAndSwapByIndexStub = nil
	fake.compareAndSwapByIndexReturns = struct {
		result1 models.Task
		result2 error
	}{result1, result2}
}

var _ repositories.TaskRepository = new(FakeTaskRepository)
