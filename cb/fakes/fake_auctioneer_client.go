// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/runtime-schema/cb"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
)

type FakeAuctioneerClient struct {
	RequestLRPAuctionsStub        func(auctioneerURL string, lrpStart []models.LRPStartRequest) error
	requestLRPAuctionsMutex       sync.RWMutex
	requestLRPAuctionsArgsForCall []struct {
		auctioneerURL string
		lrpStart      []models.LRPStartRequest
	}
	requestLRPAuctionsReturns struct {
		result1 error
	}
	RequestTaskAuctionsStub        func(auctioneerURL string, tasks []models.Task) error
	requestTaskAuctionsMutex       sync.RWMutex
	requestTaskAuctionsArgsForCall []struct {
		auctioneerURL string
		tasks         []models.Task
	}
	requestTaskAuctionsReturns struct {
		result1 error
	}
}

func (fake *FakeAuctioneerClient) RequestLRPAuctions(auctioneerURL string, lrpStart []models.LRPStartRequest) error {
	fake.requestLRPAuctionsMutex.Lock()
	fake.requestLRPAuctionsArgsForCall = append(fake.requestLRPAuctionsArgsForCall, struct {
		auctioneerURL string
		lrpStart      []models.LRPStartRequest
	}{auctioneerURL, lrpStart})
	fake.requestLRPAuctionsMutex.Unlock()
	if fake.RequestLRPAuctionsStub != nil {
		return fake.RequestLRPAuctionsStub(auctioneerURL, lrpStart)
	} else {
		return fake.requestLRPAuctionsReturns.result1
	}
}

func (fake *FakeAuctioneerClient) RequestLRPAuctionsCallCount() int {
	fake.requestLRPAuctionsMutex.RLock()
	defer fake.requestLRPAuctionsMutex.RUnlock()
	return len(fake.requestLRPAuctionsArgsForCall)
}

func (fake *FakeAuctioneerClient) RequestLRPAuctionsArgsForCall(i int) (string, []models.LRPStartRequest) {
	fake.requestLRPAuctionsMutex.RLock()
	defer fake.requestLRPAuctionsMutex.RUnlock()
	return fake.requestLRPAuctionsArgsForCall[i].auctioneerURL, fake.requestLRPAuctionsArgsForCall[i].lrpStart
}

func (fake *FakeAuctioneerClient) RequestLRPAuctionsReturns(result1 error) {
	fake.RequestLRPAuctionsStub = nil
	fake.requestLRPAuctionsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuctioneerClient) RequestTaskAuctions(auctioneerURL string, tasks []models.Task) error {
	fake.requestTaskAuctionsMutex.Lock()
	fake.requestTaskAuctionsArgsForCall = append(fake.requestTaskAuctionsArgsForCall, struct {
		auctioneerURL string
		tasks         []models.Task
	}{auctioneerURL, tasks})
	fake.requestTaskAuctionsMutex.Unlock()
	if fake.RequestTaskAuctionsStub != nil {
		return fake.RequestTaskAuctionsStub(auctioneerURL, tasks)
	} else {
		return fake.requestTaskAuctionsReturns.result1
	}
}

func (fake *FakeAuctioneerClient) RequestTaskAuctionsCallCount() int {
	fake.requestTaskAuctionsMutex.RLock()
	defer fake.requestTaskAuctionsMutex.RUnlock()
	return len(fake.requestTaskAuctionsArgsForCall)
}

func (fake *FakeAuctioneerClient) RequestTaskAuctionsArgsForCall(i int) (string, []models.Task) {
	fake.requestTaskAuctionsMutex.RLock()
	defer fake.requestTaskAuctionsMutex.RUnlock()
	return fake.requestTaskAuctionsArgsForCall[i].auctioneerURL, fake.requestTaskAuctionsArgsForCall[i].tasks
}

func (fake *FakeAuctioneerClient) RequestTaskAuctionsReturns(result1 error) {
	fake.RequestTaskAuctionsStub = nil
	fake.requestTaskAuctionsReturns = struct {
		result1 error
	}{result1}
}

var _ cb.AuctioneerClient = new(FakeAuctioneerClient)
