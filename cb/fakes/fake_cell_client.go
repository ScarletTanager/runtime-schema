// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/runtime-schema/cb"
	"github.com/cloudfoundry-incubator/runtime-schema/models"
)

type FakeCellClient struct {
	StopLRPInstanceStub        func(cellURL string, key models.ActualLRPKey, containerKey models.ActualLRPContainerKey) error
	stopLRPInstanceMutex       sync.RWMutex
	stopLRPInstanceArgsForCall []struct {
		cellURL      string
		key          models.ActualLRPKey
		containerKey models.ActualLRPContainerKey
	}
	stopLRPInstanceReturns struct {
		result1 error
	}
	CancelTaskStub        func(cellURL string, taskGuid string) error
	cancelTaskMutex       sync.RWMutex
	cancelTaskArgsForCall []struct {
		cellURL  string
		taskGuid string
	}
	cancelTaskReturns struct {
		result1 error
	}
}

func (fake *FakeCellClient) StopLRPInstance(cellURL string, key models.ActualLRPKey, containerKey models.ActualLRPContainerKey) error {
	fake.stopLRPInstanceMutex.Lock()
	fake.stopLRPInstanceArgsForCall = append(fake.stopLRPInstanceArgsForCall, struct {
		cellURL      string
		key          models.ActualLRPKey
		containerKey models.ActualLRPContainerKey
	}{cellURL, key, containerKey})
	fake.stopLRPInstanceMutex.Unlock()
	if fake.StopLRPInstanceStub != nil {
		return fake.StopLRPInstanceStub(cellURL, key, containerKey)
	} else {
		return fake.stopLRPInstanceReturns.result1
	}
}

func (fake *FakeCellClient) StopLRPInstanceCallCount() int {
	fake.stopLRPInstanceMutex.RLock()
	defer fake.stopLRPInstanceMutex.RUnlock()
	return len(fake.stopLRPInstanceArgsForCall)
}

func (fake *FakeCellClient) StopLRPInstanceArgsForCall(i int) (string, models.ActualLRPKey, models.ActualLRPContainerKey) {
	fake.stopLRPInstanceMutex.RLock()
	defer fake.stopLRPInstanceMutex.RUnlock()
	return fake.stopLRPInstanceArgsForCall[i].cellURL, fake.stopLRPInstanceArgsForCall[i].key, fake.stopLRPInstanceArgsForCall[i].containerKey
}

func (fake *FakeCellClient) StopLRPInstanceReturns(result1 error) {
	fake.StopLRPInstanceStub = nil
	fake.stopLRPInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCellClient) CancelTask(cellURL string, taskGuid string) error {
	fake.cancelTaskMutex.Lock()
	fake.cancelTaskArgsForCall = append(fake.cancelTaskArgsForCall, struct {
		cellURL  string
		taskGuid string
	}{cellURL, taskGuid})
	fake.cancelTaskMutex.Unlock()
	if fake.CancelTaskStub != nil {
		return fake.CancelTaskStub(cellURL, taskGuid)
	} else {
		return fake.cancelTaskReturns.result1
	}
}

func (fake *FakeCellClient) CancelTaskCallCount() int {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	return len(fake.cancelTaskArgsForCall)
}

func (fake *FakeCellClient) CancelTaskArgsForCall(i int) (string, string) {
	fake.cancelTaskMutex.RLock()
	defer fake.cancelTaskMutex.RUnlock()
	return fake.cancelTaskArgsForCall[i].cellURL, fake.cancelTaskArgsForCall[i].taskGuid
}

func (fake *FakeCellClient) CancelTaskReturns(result1 error) {
	fake.CancelTaskStub = nil
	fake.cancelTaskReturns = struct {
		result1 error
	}{result1}
}

var _ cb.CellClient = new(FakeCellClient)
